<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on ryan.isaac.g</title>
        <link>https://www.ryanisaacg.com/posts/</link>
        <description>Recent content in Posts on ryan.isaac.g</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Tue, 24 Dec 2019 00:00:00 +0000</lastBuildDate>
        <atom:link href="https://www.ryanisaacg.com/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>A Quicksilver Chanukah, Day 3: Gestalt</title>
            <link>https://www.ryanisaacg.com/posts/quicksilver-chanukah-2019-day-3/</link>
            <pubDate>Tue, 24 Dec 2019 00:00:00 +0000</pubDate>
            
            <guid>https://www.ryanisaacg.com/posts/quicksilver-chanukah-2019-day-3/</guid>
            <description>Often your application might want to store gamestate or configurations, but the web has no filesystem access. Additionally, you don&amp;rsquo;t want to just dump files in the user&amp;rsquo;s home directory; each desktop operating system has a different preferred location for storing application-specific data, and often different locations for different kinds of data.
Introducing gestalt, a library that bundles up your data and stores it away so you don&amp;rsquo;t have to. A sample to save some game state:</description>
            <content type="html"><![CDATA[<p>Often your application might want to store gamestate or configurations, but the web has no filesystem access. Additionally, you don&rsquo;t want to just dump files in the user&rsquo;s home directory; each desktop operating system has a different preferred location for storing application-specific data, and often different locations for different kinds of data.</p>

<p>Introducing <a href="https://crates.io/crates/gestalt"><code>gestalt</code></a>, a library that bundles up your data and stores it away so you don&rsquo;t have to. A sample to save some game state:</p>

<pre><code class="language-rust">use gestalt::{Location, save, load};
use serde::{Serialize, Deserialize};

#[derive(Serialize, Deserialize)]
struct Player {
    name: String,
    score: u32
}

let player1 = Player { name: &quot;Bob&quot;.to_string(), score: 21 };
save(Location::Cache, &quot;mygame&quot;, &quot;player1&quot;, &amp;player1).expect(&quot;Could not save Player 1&quot;);

let player2 = Player { name: &quot;Alice&quot;.to_string(), score: 200 };
save(Location::Cache, &quot;mygame&quot;, &quot;player2&quot;, &amp;player2).expect(&quot;Could not save Player 2&quot;);

// Now reload.
let player1 = load::&lt;Player&gt;(Location::Cache, &quot;mygame&quot;, &quot;player1&quot;).expect(&quot;Could not load Player 1&quot;);
let player2 = load::&lt;Player&gt;(Location::Cache, &quot;mygame&quot;, &quot;player2&quot;).expect(&quot;Could not load Player 2&quot;);
</code></pre>

<p>Getsalt creates a Key/Value store, backed by the filesystem on desktop and the web storage API. The key is formed by <code>Location</code>, which determines the kind of data (<code>Location::Cache</code>, <code>Location::Data</code>, and <code>Location::Config</code>), the application name, and a string which identifies the name of the data chunk. The value is anything that implements <code>Serialize</code> from <a href="https://crates.io/crates/serde"><code>serde</code></a>.</p>

<p><code>Cache</code> is for data that can be cleared between runs of your application; <code>Data</code> is for blobs like save states, and <code>Config</code> is for application settings. <code>gestalt</code> uses <a href="https://crates.io/crates/dirs"><code>dirs</code></a> to ensure that it saves your data in the right place for each, regardless of your user&rsquo;s operating system.</p>

<p>That&rsquo;s Day 3 done: <code>gestalt</code> is pretty small! Tomorrow&rsquo;s library, <code>blinds</code>, starts to get quite a bit bigger.</p>

<ol>
<li><a href="../quicksilver-chanukah-2019">Yesterday&rsquo;s introduction post</a></li>
<li><a href="../quicksilver-chanukah-2019-day-2"><code>platter</code>: An async file-loading API for desktop and web</a></li>
<li>This post!</li>
<li><code>blinds</code>: An easy-to-use async wrapper of <code>winit</code></li>
<li><code>golem</code>: An opinionated mostly-safe graphics library for desktop and web GL</li>
<li>Changes to the Quicksilver application lifecycle</li>
<li>Changes to the Quicskilver graphics API</li>
<li>An overview of the work on web support this yea5</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>A Quicksilver Chanukah, Day 2: Platter</title>
            <link>https://www.ryanisaacg.com/posts/quicksilver-chanukah-2019-day-2/</link>
            <pubDate>Mon, 23 Dec 2019 00:00:00 +0000</pubDate>
            
            <guid>https://www.ryanisaacg.com/posts/quicksilver-chanukah-2019-day-2/</guid>
            <description>This year saw the release of async/.await in stable Rust, marking a huge change in how asynchronous code is written. Previously, one would have to chain a series of combinators onto a Future instance to accomplish asyncrhonous tasks. In Quicksilver, this was used for asset loading (for compatibility with the web backend), and has been a frequent source of pain.
Something as simple as loading a file, reading its contents, and loading a series of images based on those contents might look like this psuedo-Rust:</description>
            <content type="html"><![CDATA[<p>This year saw the release of <code>async/.await</code> in stable Rust, marking a huge change in how asynchronous code is written. Previously, one would have to chain a series of combinators onto a <code>Future</code> instance to accomplish asyncrhonous tasks. In Quicksilver, this was used for asset loading (for compatibility with the web backend), and has been a frequent source of pain.</p>

<p>Something as simple as loading a file, reading its contents, and loading a series of images based on those contents might look like this psuedo-Rust:</p>

<pre><code class="language-rust">let images = load_file(&quot;my_manifest_path&quot;)
    .map(parse_file_contents)
    .and_then(|image_paths| join_all(
        image_paths
            .map(load_file)
            .map(|file| file.and_then(parse_image))
    );

render_loading();
loop {
    // Core application loop
    if images.is_ready {
        render_frame(&amp;images);
    }
}
</code></pre>

<p>This is fairly hard to read, and requires a bit of domain-specific knowledge of the combinators to achieve it. Worse still is introducing more than one of these combinator chains, and trying to execute game logic only if they complete. This snippet is plenty complex, and hasn&rsquo;t even touched error handling.</p>

<p>Introducing <a href="https://crates.io/crates/platter"><code>platter</code></a>, a new async-enabled crate with a single, simple task: load files on desktop and web with an easy API.</p>

<pre><code class="language-rust">render_loading();
let contents = load_file(&quot;my_manifest_path&quot;).await?;
let image_paths = parse_file_contents(contents);
let images = Vec::new();
for image_path in image_paths {
    let image_file = load_file(image_path).await?;
    images.push(parse_image(image_file)?);
}
loop {
    render_frame(&amp;images);
}
</code></pre>

<p>We can still make use of the combinators in a more functional-programming style if we wish, but now it&rsquo;s much clearer:</p>

<pre><code class="language-rust">render_loading();
let contents = load_file(&quot;my_manifest_path&quot;).await;
let image_futures = parse_file_contents(contents)
    .map(load_file);
let images: Vec&lt;Image&gt; = try_join_all(image_futures)
    .await?
    .map(parse_image)
    .collect()?;
loop {
    render_frame(&amp;images);
}
</code></pre>

<p><code>platter</code> is small and can be plugged into your own game framework or game project if you want to harness <code>async/await</code> to load files on desktop and web. It will be a major part of the new Quicksilver application lifecyle!</p>

<p>That&rsquo;s Day 2 down, but there are 6 more days of Quicksilver Chanukah:</p>

<ol>
<li><a href="../quicksilver-chanukah-2019">Yesterday&rsquo;s introduction post</a></li>
<li>This post!</li>
<li><a href="../quicksilver-chanukah-2019-day-3"><code>gestalt</code>: An API to manage bundling and saving data locally on desktop and web</a></li>
<li><code>blinds</code>: An easy-to-use async wrapper of <code>winit</code></li>
<li><code>golem</code>: An opinionated mostly-safe graphics library for desktop and web GL</li>
<li>Changes to the Quicksilver application lifecycle</li>
<li>Changes to the Quicskilver graphics API</li>
<li>An overview of the work on web support this yea5</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>A Quicksilver Chanukah: Day 1</title>
            <link>https://www.ryanisaacg.com/posts/quicksilver-chanukah-2019/</link>
            <pubDate>Sun, 22 Dec 2019 00:00:00 +0000</pubDate>
            
            <guid>https://www.ryanisaacg.com/posts/quicksilver-chanukah-2019/</guid>
            <description>I started this year with a blog post about the state of Quicksilver where I set a goal for myself: get web support for important game development crates upstreamed. At the end of the year, I&amp;rsquo;m happy to update this work (by me and many others!) has been a success, and the core of Rust&amp;rsquo;s game ecosystem is now-web enabled. In the future, I want to write a brief overview of those changes, but for now I want to focus on their relevance to Quicksilver.</description>
            <content type="html"><![CDATA[<p>I started this year with a <a href="../state-of-quicksilver-feb-2019">blog post about the state of Quicksilver</a> where I set a goal for myself: get web support for important game development crates upstreamed. At the end of the year, I&rsquo;m happy to update this work (by me and many others!) has been a success, and the core of Rust&rsquo;s game ecosystem is now-web enabled. In the future, I want to write a brief overview of those changes, but for now I want to focus on their relevance to Quicksilver.</p>

<p>Without having to maintain my own set of web bindings for Quicksilver, I was able to start working on significant changes to both the internal and external structure. There are a few entirely unrelated modules in Quicksilver that are all needed for the framework: handling filesystem resources, creating and loading local data, the event loop, the graphics API, and the sound API. It makes sense to allow users to pick and choose these systems, which is the goal of Quicksilver&rsquo;s optional features. However, that still requires depending on Quicksilver, which doesn&rsquo;t make sense for some projects. Instead, I&rsquo;ve created a few new crates that anyone can drop into their project without pulling in any other Quicksilver-related code.</p>

<p>Additionally, a major new Rust feature landed this year: async/await. Quicksilver&rsquo;s asset loading system has been a sticking point, because of its design decisions and the inherent pain of combinator-based <code>Future</code> code. With <code>async</code> and <code>.await</code>, a new asynchronous asset loading API can be almost seamless. Combined with fixes to long-standing graphics API problems, I&rsquo;ve been working on a new major release for Quicksilver (which will be the first breaking change in over a year.)</p>

<p>As <a href="https://en.wikipedia.org/wiki/Hanukkah">Chanukah</a> starts tonight, I&rsquo;m going to share these new crates and big Quicksilver updates over the next eight days. I can&rsquo;t promise I&rsquo;ll actually stick to this schedule, but my goal is:</p>

<ol>
<li>This post!</li>
<li><a href="../quicksilver-chanukah-2019-day-2"><code>platter</code>: An async file-loading API for desktop and web</a></li>
<li><a href="../quicksilver-chanukah-2019-day-3"><code>gestalt</code>: An API to manage bundling and saving data locally on desktop and web</a></li>
<li><code>blinds</code>: An easy-to-use async wrapper of <code>winit</code></li>
<li><code>golem</code>: An opinionated mostly-safe graphics library for desktop and web GL</li>
<li>Changes to the Quicksilver application lifecycle</li>
<li>Changes to the Quicskilver graphics API</li>
<li>An overview of the work on web support this year</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Website Makeover</title>
            <link>https://www.ryanisaacg.com/posts/new-blog-debut/</link>
            <pubDate>Sat, 20 Jul 2019 00:00:00 +0000</pubDate>
            
            <guid>https://www.ryanisaacg.com/posts/new-blog-debut/</guid>
            <description>So www.ryanisaacg.com has a very new look, powered by Hugo and my (fairly small) fork of the hello-friend-ng theme. Partly the site will be dedicated to a bit of a professional showcase / bio for myself, but also with added blog functionality I can communicate in a more public way about my plans for my open source projects.
The State of Quicksilver that I wrote earlier this year has moved from its previous home as Github gist to retroactively being a post here, as I feel more comfortable linking to my writing in a domain that I control and can ensure the links stay live.</description>
            <content type="html"><![CDATA[<p>So www.ryanisaacg.com has a very new look, powered by Hugo and my (fairly small) fork of the <a href="https://github.com/rhazdon/hugo-theme-hello-friend-ng">hello-friend-ng</a> theme. Partly the site will be dedicated to a bit of a professional showcase / bio for myself, but also with added blog functionality I can communicate in a more public way about my plans for my open source projects.</p>

<p>The State of Quicksilver that I wrote earlier this year has moved from its previous home as Github gist to retroactively being a post here, as I feel more comfortable linking to my writing in a domain that I control and can ensure the links stay live. The Quicksilver website itself is still hosted within the Quicksilver repo, partially for ease of version control (if a commit changes code, it can change the website docs in lockstep) and partially because I&rsquo;m not sure how much I want to present Quicksilver as being <em>my project</em> versus the <em>Quicksilver project</em>. I&rsquo;m too cheap and lazy to buy a quicksilver domain, so the URL still contains my screen name, but the website is independent of the rest of ryanisaacg.com. Future State-Of-Quicksilver posts will also live on this blog though, as my personal plans for the project and my work for the Rust ecosystem feel out-of-band for the actual Quicksilver site.</p>

<p>I won&rsquo;t be embedding Disqus for comments, but if you want to chat I&rsquo;m on the <a href="https://bit.ly/rust-community">Rust Community Discord</a> as @ryanisaacg. I&rsquo;d love to hear people&rsquo;s thoughts on the new look, if Quicksilver should be moved to a sub-page of this site, and if State of Quicksilver should be a gist, blog posts here, or some combination.</p>
]]></content>
        </item>
        
        <item>
            <title>The State of Quicksilver Feb 2019</title>
            <link>https://www.ryanisaacg.com/posts/state-of-quicksilver-feb-2019/</link>
            <pubDate>Mon, 04 Feb 2019 00:00:00 +0000</pubDate>
            
            <guid>https://www.ryanisaacg.com/posts/state-of-quicksilver-feb-2019/</guid>
            <description>What is Quicksilver? For anyone who doesn&amp;rsquo;t know, Quicksilver is my 2D game framework that targets desktop and web. It is a pure-Rust library that focuses on ergonomics and simplicity.
The State of Rust (WASM) Game Development Quicksilver is part of a small (but growing) set of Rust game engines. Notable are the Amethyst project, an open-source game engine, and ggez, a LOVE-inspired 2D game framework. Increasingly it is practical to build an entire game with only the Rust toolchain: winit provides windowing, a variety of crates allow access to platform graphics APIs, rodio provides sound, rusttype for font rendering, etc.</description>
            <content type="html"><![CDATA[

<h2 id="what-is-quicksilver">What is Quicksilver?</h2>

<p>For anyone who doesn&rsquo;t know, <a href="https://github.com/ryanisaacg/quicksilver">Quicksilver</a> is my 2D game framework that targets desktop and web. It is a pure-Rust library that focuses on ergonomics and simplicity.</p>

<h2 id="the-state-of-rust-wasm-game-development">The State of Rust (WASM) Game Development</h2>

<p>Quicksilver is part of a small (but growing) set of Rust game engines. Notable are the Amethyst project, an open-source game engine, and ggez, a LOVE-inspired 2D game framework.
Increasingly it is practical to build an entire game with only the Rust toolchain: winit provides windowing, a variety of crates allow access to platform graphics APIs, rodio provides sound, rusttype for font rendering, etc. A pure-Rust game framework is getting easier to make all the time.</p>

<p>However, very few libraries support WASM out of the box. This means Quicksilver and Rust WASM games in general essentially have small implementations of windowing, event handling, sounds, graphics, and input for the web that have not been contributed upstream.</p>

<h2 id="the-framework-problem">The Framework Problem</h2>

<p>Opting to use Quicksilver for some feature (web support, API design, automatic batching) requires opting into <em>all</em> of Quicksilver&rsquo;s features. This isn&rsquo;t necessarily great! Even with compile-time feature flags available, it&rsquo;s hard to do any Quicksilver code without buying into the State trait. This boils down to the vision of Quicksilver as a framework: if you can just plug in Quicksilver and start making a game right away, it needs to be everything to everyone.</p>

<p>Partly this is due to Quicksilver&rsquo;s history as a bit of a learning project for me, which I wanted to build from scratch in as many places as possible. It&rsquo;s also caused by my impatience: the Rust ecosystem is amazing and featureful, but waiting for every single upstream project to accept changes would mean that Quicksilver could only be developed as fast as its slowest dependency. I tend to have time to work on the project in bursts, when I clear out the bug backlog and implement a few features from the roadmap; this doesn&rsquo;t mesh well with long-running interactions with other projects. The way I&rsquo;ve handled this in the past is writing my own Javascript bindings for each feature, essentially cloning an entire crate.</p>

<h2 id="the-fundamentals">The Fundamentals</h2>

<p>Largely, Quicksilver&rsquo;s API is approaching a state of stability. It accomplishes most of what I want it to, in a way I&rsquo;m largely satisfied with. For end users, the Quicksilver project has been more or less stable for a few months, and no substantial breaking changes are planned for the future.</p>

<p>However, Quicksilver still has quite a few systems implemented by a dependency and an ad-hoc web clone of that dependency. This is what I hope to change, by contributing web backends across the ecosystem. My ideal outcome is that the fundamental multimedia crates (winit, rodio, gilrs, etc.) can run on WASM out-of-the-box.</p>

<h2 id="going-forward">Going Forward</h2>

<p>If it sounds like my current goal is to make Quicksilver obsolete, that wouldn&rsquo;t be too far off. Quicksilver&rsquo;s raison d&rsquo;etre is packaging up a bundle of functionality and to provide a single API for both web and native. Moving the ecosystem to support web and native makes this less important. Parts of Quicksilver that I think are particularly useful will probably become their own crates (re-exported in Quicksilver) to allow their use outside the framework. Some future version of Quicksilver may just be entirely a re-export of various crates and types with a consistent organization.</p>

<p>In essence, I want seamless desktop and WASM development to move from a selling point of developing games in Quicksilver to a selling point of developing games in Rust.</p>
]]></content>
        </item>
        
    </channel>
</rss>
