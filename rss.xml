<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Ryan’s Blog</title><description>A blog about whatever catches my interest</description><link>https://ryanisaacg.com/</link><language>en-us</language><item><title>Learning About the Language Server Protocol</title><link>https://ryanisaacg.com/posts/learning-lsps/</link><guid>https://ryanisaacg.com/posts/learning-lsps/</guid><description>As part of my programming language project, I&apos;ve been writing a language server. I&apos;m familiar with the very basics of the LSP from integrating Neovim with projects like rust-analyzer, but this is the first time I&apos;ve dug into its internals.</description><pubDate>Fri, 26 Jul 2024 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;As part of &lt;a href=&quot;../programming-language-for-fun&quot;&gt;my programming language project&lt;/a&gt;, I&apos;ve been writing a language server. I&apos;m familiar with the very basics of the &lt;a href=&quot;https://microsoft.github.io/language-server-protocol/&quot;&gt;LSP&lt;/a&gt; from integrating Neovim with projects like &lt;code&gt;rust-analyzer&lt;/code&gt;, but this is the first time I&apos;ve dug into its internals.&lt;/p&gt;
&lt;p&gt;The protocol consists of JSON messages exchanged[^transport] between a server and a client. The server understands the programming language and does all the processing. The client[^clients] interacts with the server in a high-level way, abstracting the difference between programming languages. Most exchanges involve a request from the client and a response from the server;&lt;/p&gt;
&lt;p&gt;[^transport]: The specification allows for many different underlying communication mechanisms. I think Neovim is mostly using stdin/stdout, but servers can also communicate over sockets or other IPC mechanisms.&lt;/p&gt;
&lt;p&gt;&amp;lt;p&amp;gt; &amp;lt;img src=&amp;quot;/client-server-request.svg&amp;quot; class=&amp;quot;diagram&amp;quot; alt=&amp;quot;A diagram demonstrating neovim sending a request and rust-analyzer responding&amp;quot; /&amp;gt; &amp;lt;/p&amp;gt;&lt;/p&gt;
&lt;p&gt;some go the other direction (the server requests and the client responds).&lt;/p&gt;
&lt;p&gt;&amp;lt;p&amp;gt; &amp;lt;img src=&amp;quot;/server-client-request.svg&amp;quot; class=&amp;quot;diagram&amp;quot;  alt=&amp;quot;A diagram demonstrating rust-analyzer sending a request and Neovim responding&amp;quot; /&amp;gt; &amp;lt;/p&amp;gt;&lt;/p&gt;
&lt;p&gt;Still others are one-way messages with no response; these are called &amp;quot;notifications&amp;quot; in the LSP spec.&lt;/p&gt;
&lt;p&gt;&amp;lt;p&amp;gt;  &amp;lt;img src=&amp;quot;/lsp-notif.svg&amp;quot; class=&amp;quot;diagram&amp;quot;  alt=&amp;quot;A diagram demonstrating neovim sending a notification to rust-analyzer and rust-analyzer sending a notification to neovim&amp;quot;/&amp;gt; &amp;lt;/p&amp;gt;&lt;/p&gt;
&lt;p&gt;[^clients]: I only know of using text editors as LSP clients, like VSCode or Neovim. There may be other possible clients, but I don&apos;t know of them.&lt;/p&gt;
&lt;p&gt;Different clients and servers can have different &amp;quot;capabilities&amp;quot;, which they exchange during initial connection.[^exchange] For example, there&apos;s a capability &lt;code&gt;definitionProvider&lt;/code&gt; which the server may or may not have. If a server doesn&apos;t advertise this capability, the client&apos;s interface shouldn&apos;t show &amp;quot;go to definition&amp;quot; controls.&lt;/p&gt;
&lt;p&gt;[^exchange]: Servers may register new capabilities or unregister existing ones at runtime. Clients may or may not support dynamic registration. I&apos;m not sure what circumstances would lead a server to change its capabilities at runtime, but the option is there?&lt;/p&gt;
&lt;p&gt;&amp;lt;aside&amp;gt;&lt;/p&gt;
&lt;p&gt;This can be lead to a footgun in early development: forgetting to enable a capability you&apos;re newly adding. When I first added a goto-definition handler, logs showed that my commands weren&apos;t even reaching the language server. I spent a little while debugging my goto-definition handler in confusion, before I realized I needed to report &lt;code&gt;definitionProvider: true&lt;/code&gt;. Once I reported the capability, my commands began to reach the server.&lt;/p&gt;
&lt;p&gt;&amp;lt;/aside&amp;gt;&lt;/p&gt;
&lt;p&gt;At various points in the document lifecycle, the client notifies the server of changes. This is why &lt;code&gt;rust-analyzer&lt;/code&gt; can typecheck your files even before you save; your editor is sending your changes to the server as notifications. Depending on what capabilities the server advertises, it can receive events like &amp;quot;documented opened&amp;quot;, &amp;quot;document changed&amp;quot;, &amp;quot;document closed&amp;quot;, &amp;quot;document renamed&amp;quot;, etc. It&apos;s expected to track changes internally, as future commands will reference these unsaved versions of the documents.&lt;/p&gt;
&lt;p&gt;There are all sorts of features that servers can support. Some are user-initiated actions, like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Goto definition&lt;/li&gt;
&lt;li&gt;Find references&lt;/li&gt;
&lt;li&gt;Highlight instances of a symbol&lt;/li&gt;
&lt;li&gt;Retrieve hover information&lt;/li&gt;
&lt;li&gt;Run &amp;quot;code actions&amp;quot; (like importing unknown names or refactoring code blocks)&lt;/li&gt;
&lt;li&gt;Rename a given symbol&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are other requests that the client makes without user input, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Inlay hints (used for type annotations in &lt;code&gt;rust-analyzer&lt;/code&gt;, I don&apos;t think they&apos;re in Neovim)&lt;/li&gt;
&lt;li&gt;Inline values (not sure what these are used for, they&apos;re not in Neovim I think)&lt;/li&gt;
&lt;li&gt;Completion options (this is technically kicked off by user input but rarely a specific command in the interface)&lt;/li&gt;
&lt;li&gt;Semantic syntax highlighting&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You&apos;ll notice that the line between &amp;quot;user actions&amp;quot; and &amp;quot;editor actions&amp;quot; is blurry. The LSP spec itself makes no distinction between user-initiated and automatic requests; they all come from the client and the server handles them the same way.&lt;/p&gt;
&lt;p&gt;Inline errors (&amp;quot;diagnostics&amp;quot; in the spec) are usually pushed from the server to the client as a notification. The spec makes no requirement of when this notification can be made, which means that compilation and type-checking can happen asynchronously. Servers are responsible for clearing out diagnostics if a compilation succeeds, by sending a &amp;quot;publish diagnostics&amp;quot; notification with an empty body.&lt;/p&gt;
&lt;p&gt;I still have more to learn about the spec! While browsing I&apos;ve seen references to CodeLens and Workspaces. I&apos;m not sure these features exist in my editor? I&apos;ve never encountered them at least. If I want to provide excellent VSCode support for my language, I&apos;ll revisit them and try to learn what they are.&lt;/p&gt;
&lt;p&gt;In a future post, I plan to talk through the language server I&apos;ve created and the design decisions I&apos;m making as I work through it.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Thanks to &lt;a href=&quot;https://github.com/ttiimm&quot;&gt;Tim Likarish Ellis&lt;/a&gt; for feedback on a draft of this post.&lt;/em&gt;&lt;/p&gt;
</content:encoded></item><item><title>Checking train times with Shortcuts</title><link>https://ryanisaacg.com/posts/path-times/</link><guid>https://ryanisaacg.com/posts/path-times/</guid><description>I live in Jersey City and rely on the PATH to get into the city. During commute windows, headways are conveniently every 5 minutes. Outside of those windows, the Newark↔World Trade Center line plummets to every 20 minutes. There’s no use leaving my apartment whenever I&apos;m ready; I have to plan around the train schedule. The PATH’s app does not make this easy. Real-time station information can be pinned to the app’s homepage, but it takes an seconds or minutes to load. The non-real-time schedule requires multiple taps, each with their own little loading segments to access. If I&apos;m getting ready to go, it&apos;s pretty annoying to figure out what train I should be shooting for.</description><pubDate>Wed, 24 Jul 2024 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I live in Jersey City and rely on the &lt;a href=&quot;https://en.wikipedia.org/wiki/PATH_(rail_system)&quot;&gt;PATH&lt;/a&gt; to get into the city. During commute windows, headways are conveniently every 5 minutes. Outside of those windows, the Newark↔World Trade Center line plummets to every 20 minutes. There’s no use leaving my apartment whenever I&apos;m ready; I &lt;em&gt;have&lt;/em&gt; to plan around the train schedule. The PATH’s app does not make this easy. Real-time station information can be pinned to the app’s homepage, but it takes an seconds or minutes to load. The non-real-time schedule requires multiple taps, each with their own little loading segments to access. If I&apos;m getting ready to go, it&apos;s pretty annoying to figure out what train I should be shooting for.&lt;/p&gt;
&lt;p&gt;While I’m at the Recurse Center, I figured I should embrace the hacker spirit and solve this problem with some software. My first thought was an SMS-based solution. NJ Transit allows you to text them with a bus or light rail stop number in exchange for arrival times; I think the MTA has something similar. I planned to build a shortcut which would send the correct text and report the result, so I could trigger the workflow at the press of a button. Unfortunately... the PATH has no such texting-based option. Clearly I&apos;d have to some programming, so I began to search for what sort of API the PATH exposed.&lt;/p&gt;
&lt;p&gt;Fool that I am, expecting answers to be so simple. There is no public-facing PATH API, at least not one that&apos;s immediately apparent. Fortunately, someone else has already &lt;a href=&quot;https://medium.com/@mrazza/programmatic-path-real-time-arrival-data-5d0884ae1ad6&quot;&gt;reverse-engineered the PATH app and published their findings.&lt;/a&gt; The reason real-time data takes so long to load in the app is that it&apos;s subscribed to the next &lt;em&gt;update&lt;/em&gt;, not retrieving the information directly. It seems there&apos;s no official PATH endpoint to retrieve the most recent train data at all! Thankfully for me, the aforementioned reverse engineer has a cache to store each update and make it available over an HTTP API. Phew.&lt;/p&gt;
&lt;p&gt;With an HTTP API in hand, I began to think about how best to use it. Bookmark the URL and read the JSON myself? No, the train times are in UTC and mentally converting them to Eastern would be too much work. Create a tiny webpage that displays the information? Maybe, but it doesn&apos;t seem that convenient to access at a moment&apos;s notice. Write an app? That seemed too heavyweight for my goals. I happened to be on the train while thinking of my next step, and reached for a tool available on my phone: &lt;a href=&quot;https://support.apple.com/guide/shortcuts/welcome/ios&quot;&gt;iOS Shortcuts&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Shortcuts is a drag-and-drop programming language Apple makes available for system automation. It comes with a few built-in tools, and third-party apps can make actions available if they&apos;re installed. I was delighted to discover one of the built-in tools could send an HTTP request and another could convert the JSON result into a Shortcuts Dictionary. Some fiddling with loops and variables ensued, and I was left with a script that retrieves the HTTP data and creates simple textual output as a result. You can check out &lt;a href=&quot;https://www.icloud.com/shortcuts/25814ae385ce46a593d6d2ea602a6b65&quot;&gt;the finished product&lt;/a&gt; if you have an Apple device of some kind.&lt;/p&gt;
&lt;p&gt;Siri integration with Shortcuts is out-of-the-box, so my solution ended up more convenient than I expected. Now I can long-press my watch crown button and say ask for the path times, and after a second or two my watch will read off the upcoming departures from my local station. This is exactly what I wanted: no-fuss train information that doesn&apos;t break my flow as I get ready.&lt;/p&gt;
</content:encoded></item><item><title>Recurse Center: Week 3</title><link>https://ryanisaacg.com/posts/recurse-week-3/</link><guid>https://ryanisaacg.com/posts/recurse-week-3/</guid><description>My third week at Recurse was a little more eclectic than the past two:</description><pubDate>Mon, 22 Jul 2024 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;My third week at Recurse was a little more eclectic than the past two:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I got halfway done with my plans to add subscription support to my toy document store - currently you can subscribe to individual documents, but subscriptions to collections of documents aren&apos;t supported.&lt;/li&gt;
&lt;li&gt;For &amp;quot;Impossible Stuff Day&amp;quot; I started on a web toy that connects many users, all playing piano notes that propagate from their locations in near-real-time. True to the theme of Impossible Stuff I didn&apos;t quite hit the mark: my visualization of lat/long didn&apos;t come together, and the piano notes themselves sound very harsh. I&apos;ll probably pick this project back up in week 5 and polish those aspects!&lt;/li&gt;
&lt;li&gt;At Creative Coding I made a tiny text game with &lt;a href=&quot;https://github.com/swlody&quot;&gt;Sam&lt;/a&gt;. It pulls a random page from Simple English Wikipedia and replaces one of the words with a randomly chosen impostor. The player must guess which word doesn&apos;t belong. It&apos;s surprisingly fun for something we slapped together in two hours.&lt;/li&gt;
&lt;li&gt;Diagnostics from &lt;a href=&quot;../programming-language-for-fun&quot;&gt;my programming language&lt;/a&gt;&apos;s LSP now show up in my editor (very excited about this one).&lt;/li&gt;
&lt;li&gt;The &amp;quot;practical language design&amp;quot; group met at a time that worked for me, and we talked about parser techniques.&lt;/li&gt;
&lt;li&gt;Got to chat with &lt;a href=&quot;https://www.scannedinavian.com/&quot;&gt;Shae&lt;/a&gt; about programming langauges, Haskell, Rust, substructural type systems, and a bunch of other stuff.&lt;/li&gt;
&lt;li&gt;Paired with &lt;a href=&quot;https://annahope.me/&quot;&gt;Anna&lt;/a&gt; on her project to create a reference-counted pointer in Zig. Bonus points: Got to play with &lt;a href=&quot;https://zed.dev/&quot;&gt;Zed&apos;s&lt;/a&gt; collaboration tools for the first time.&lt;/li&gt;
&lt;li&gt;My blog now supports creating draft links which aren&apos;t linked in its feeds, but can be shared privately. This will be very helpful for asking for feedback on draft posts.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This upcoming week I plan to participate in the RC game jam, write some blog posts about what I&apos;ve learned thus far in my batch, and start learning the very basics of compiler optimizations. If inspiration strikes I&apos;d like to write a program in &lt;a href=&quot;https://www.roc-lang.org/&quot;&gt;Roc&lt;/a&gt; or futz with Bluetooth.&lt;/p&gt;
</content:encoded></item><item><title>Recurse Center: Week 2</title><link>https://ryanisaacg.com/code/recurse-week-2/</link><guid>https://ryanisaacg.com/code/recurse-week-2/</guid><description>Orientation is done! We&apos;re in the batch for real now.</description><pubDate>Wed, 17 Jul 2024 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Orientation is done! We&apos;re in the batch for real now.&lt;/p&gt;
&lt;p&gt;A few folks in my batch were interested in the &lt;a href=&quot;https://app.codecrafters.io/courses/sqlite/overview&quot;&gt;CodeCrafters SQLite course&lt;/a&gt;, so I gave that a try. It didn&apos;t end up meeting our expectations. Rather than giving any sort of step-by-step explanation of what you should do, the course just sort of links to the SQLite docs. I attempted to forge ahead regardless; after much frustration I made some tangible progress. &lt;a href=&quot;https://github.com/ryanisaacg/sqlite/&quot;&gt;My implementation&lt;/a&gt; can count the number of the tables in the a SQLite database, and tell you their names. I now feel confident that I &lt;em&gt;could&lt;/em&gt; write code that queries the data in a SQLite database, but I&apos;m not sure I want to spend the rest of my batch down this rabbit hole. For now I&apos;ll be putting it to the side.&lt;/p&gt;
&lt;p&gt;I tried to improve &lt;a href=&quot;https://github.com/ryanisaac/hindsight&quot;&gt;Hindsight&lt;/a&gt; (my app to remind me to take breaks while coding) by detecting if the camera is on, rather than if Zoom is open. At first I tried using a library but &lt;a href=&quot;https://github.com/sindresorhus/is-camera-on/issues/4&quot;&gt;it doesn&apos;t work on my model of macbook&lt;/a&gt;, so for now Hindsight will remain un-improved. Someone did link to the apparent &lt;a href=&quot;https://github.com/wouterdebie/onair/issues/3&quot;&gt;source of the issue&lt;/a&gt;, so maybe I&apos;ll take some time in the future to dig in and fix the problem?&lt;/p&gt;
&lt;p&gt;For my still-unnamed programming language I spent some time on &lt;a href=&quot;../programming-language-for-fun&quot;&gt;a blog post&lt;/a&gt; and made some progress on understanding language servers. I didn&apos;t ship any major new features, but I did lay the foundation for supporting hover information and error highlighting[^highlighting].&lt;/p&gt;
&lt;p&gt;[^highlighting]: At the time of writing I&apos;ve used that foundation to build error highlighting! Spoilers for next week&apos;s post 🤫&lt;/p&gt;
&lt;p&gt;This week I also started two new projects: &lt;a href=&quot;https://github.com/ryanisaacg/iceload&quot;&gt;Iceload&lt;/a&gt; and &lt;a href=&quot;https://github.com/ryanisaacg/wasmtime-dl&quot;&gt;&lt;code&gt;wasmtime-dl&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Iceload is my toy clone of &lt;a href=&quot;https://firebase.google.com/docs/firestore&quot;&gt;Firestore&lt;/a&gt;, a document database with built-in pub/sub capabilities. My goal is to be able to get the developer experience of Firestore (easy setup, easy subscriptions to values, no need for a separate application server) in a local-first, &amp;quot;handmade&amp;quot; dev environment. I&apos;m using &lt;a href=&quot;https://crates.io/crates/sled&quot;&gt;&lt;code&gt;sled&lt;/code&gt;&lt;/a&gt; for the key/value store and persistence[^couldwant], and a websocket to communicate with clients. Currently basic document operations (get, insert, update, remove) all work! The next major steps are supporting subscriptions, creating the schema, and access control.&lt;/p&gt;
&lt;p&gt;[^couldwant]: At the start of my batch I didn&apos;t even know how I &lt;em&gt;could&lt;/em&gt; possibly write my own persisted key/value store. Now that I&apos;ve implemented a B-Tree and trawled through the SQLite file format I&apos;m confident in my new abilities, but also aware of how much work it would be. I now feel much better about offloading that component to &lt;code&gt;sled&lt;/code&gt; and building atop prior art!&lt;/p&gt;
&lt;p&gt;&lt;code&gt;wasmtime-dl&lt;/code&gt; is a truly cursed Rust crate. Given a shared library (&lt;code&gt;dll&lt;/code&gt; on Windows, &lt;code&gt;dylib&lt;/code&gt; on macOS, &lt;code&gt;so&lt;/code&gt; on Linux), I want to be able to expose that library&apos;s exports to a wasmtime instance. Importantly I want to do this without needing to hand-write bindings that tell the wasmtime linker about the library; I want to drive the process with data instead. This is important for my programming language project; if I want my package to include some native functionality (say SDL2 bindings) I don&apos;t want to have to drop down to Rust. Instead I should be able to describe the exported functions from the shared library and then bind it into the WASM VM. I&apos;m excited to put &lt;code&gt;wasmtime-dl&lt;/code&gt; into &amp;quot;production&amp;quot; in week 3 as I build out functionality for programs to bind to their host environments.&lt;/p&gt;
&lt;p&gt;The curse of &lt;code&gt;wasmtime-dl&lt;/code&gt; is how it goes about this binding: 16,000 lines of generated Rust code to pattern match over possible shapes of functions. For every combination of &lt;code&gt;i32&lt;/code&gt;/&lt;code&gt;f32&lt;/code&gt;/&lt;code&gt;i64&lt;/code&gt;/&lt;code&gt;f64&lt;/code&gt; parameters (up to 4) and return values (including &lt;code&gt;void&lt;/code&gt; returns), there&apos;s a match case generated. Then for every function with just &lt;code&gt;i32&lt;/code&gt; parameters (up to 16) and either a returned &lt;code&gt;i32&lt;/code&gt; or &lt;code&gt;void&lt;/code&gt; has its own case. Originally I wanted to support any primitive for up to 16 arguments, but the combinatorial explosion is real. That would have taken millions of lines of generated code, I think?&lt;/p&gt;
&lt;p&gt;At the very tail end of the week I started on the &lt;a href=&quot;https://raytracing.github.io/books/RayTracingInOneWeekend.html&quot;&gt;Raytracing in One Weekend&lt;/a&gt; with a pair of other Recursers in my batch. We got through all the setup and are poised to actually start tracing some rays, which should be fun!&lt;/p&gt;
&lt;p&gt;Week 2 was significantly more social than Week 1, because I spent a lot more time in-person at the hub. I find it hard to avoid going heads-down on my remote days, and end up wiling away the hours working without much interaction. As a result I find myself planning to spend as much time in the hub as possible, even though I&apos;m a staunch remote-work fan. Something for me to think about over the next ten weeks, I guess!&lt;/p&gt;
</content:encoded></item><item><title>Writing a Programming Language for Fun</title><link>https://ryanisaacg.com/code/programming-language-for-fun/</link><guid>https://ryanisaacg.com/code/programming-language-for-fun/</guid><description>For a little under a year I&apos;ve been working on a programming language project. It&apos;s a high level language that compiles to WebAssembly, designed to small games or scripts. Here I&apos;ll introduce the language, explain my design decisions thus far, and complain about naming things.</description><pubDate>Mon, 15 Jul 2024 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;For a little under a year I&apos;ve been working on &lt;a href=&quot;https://github.com/ryanisaacg/my-programming-language/&quot;&gt;a programming language project&lt;/a&gt;. It&apos;s a high level language that compiles to WebAssembly, designed to small games or scripts. Here I&apos;ll introduce the language, explain my design decisions thus far, and complain about naming things.&lt;/p&gt;
&lt;h2&gt;An Example&lt;/h2&gt;
&lt;p&gt;Before I get into the weeds, I figured I should show off what a snippet of the language looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import self.tilemap.Tilemap;
import self.tilemap.Tile;
import self.character_controller;
import self.character_controller.Input;

const TILE_SIZE = 32;

struct State {
    player: Player,
    map: Tilemap,
    input: Input,

    fn tick(self: unique State) {
        // Update
        character_controller.update_player(unique self.player, unique self.input, ref self.map);

        // Draw
        sdl.set_color(255, 255, 255, 255);
        sdl.clear();

        borrow player = ref self.player;
        sdl.set_color(255, 0, 0, 255);
        sdl.fill_rect(player.pos.x, player.pos.y, TILE_SIZE, TILE_SIZE);

        borrow tilemap = ref self.map;
        sdl.set_color(0, 0, 0, 255);
        let tile_x = 0;
        while tile_x &amp;lt; tilemap.width {
            let tile_y = 0;
            while tile_y &amp;lt; tilemap.height {
                let idx = tile_x * tilemap.height + tile_y;
                case tilemap.tiles[idx] {
                    Empty =&amp;gt; {}
                    Block =&amp;gt; {
                        sdl.fill_rect(tile_x * TILE_SIZE, tile_y * TILE_SIZE, TILE_SIZE, TILE_SIZE);
                    }
                }
                tile_y += 1;
            }
            tile_x += 1;
        }

        sdl.present();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With this little example in mind, why have I created this programming language?&lt;/p&gt;
&lt;h2&gt;(Writing a Programming Language) for Fun&lt;/h2&gt;
&lt;p&gt;Principally I started this project to enjoy the process and craft. Compilers are some of the most software-ass-software I&apos;ve ever written: take as input a structured formal language, and output another structured formal language. It really satisfies the puzzle-solver in me.&lt;/p&gt;
&lt;p&gt;Given the project&apos;s hobby origins, it has hobby goals. I am willing to make compromises on the language itself, the compiler, and the output all in service of having a good time. If I have to trade off a little expressiveness in the language to save a little complexity in the compiler, I&apos;ll often take that trade. With that in mind, what am I compiling?&lt;/p&gt;
&lt;h2&gt;Writing (a Programming Language for Fun)&lt;/h2&gt;
&lt;p&gt;When I program for fun, it&apos;s almost always in Rust. In many ways Rust is my dream language: an imperative programming model, a broad ecosystem, a WASM backend, a good safety story, and great tooling like Cargo. For games and little scripts, I find Rust less satisfying because of high compilation times and inconvenient zero-cost abstractions (e.g. having to repeatedly clone strings or &lt;code&gt;Rc&lt;/code&gt;s).&lt;/p&gt;
&lt;p&gt;My language is aimed at the niche of smaller programs which don&apos;t need the full weight of Rust&apos;s performance or expressive power. Its goals are to be easy to use, enable quick iteration, prevent silly mistakes, deploy to both web and desktop, and run efficiently enough to make games. Implementation concerns are allowed to override design concerns, but ideally they won&apos;t have to. In making early design decisions, I took inspiration from Rust, TypeScript, my half-baked understanding of Go, &lt;a href=&quot;https://without.boats/blog/notes-on-a-smaller-rust/&quot;&gt;Notes on a smaller Rust&lt;/a&gt;, &lt;a href=&quot;https://graydon2.dreamwidth.org/307291.html&quot;&gt;The Rust I Wanted Had No Future&lt;/a&gt;, &lt;a href=&quot;https://www.scattered-thoughts.net/writing/implementing-interactive-languages/&quot;&gt;Implementing interactive languages&lt;/a&gt;, and &lt;a href=&quot;https://austral-lang.org/&quot;&gt;Austral&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;My first and easiest decision was types and type inference: all expressions have static types, and type information flows only in one direction. For the kind of programs I want to write, a full Hindley-Milner-style system seems like overkill. Instead each expression has a type entirely devoid of its context, and type information flows from the right hand side of declarations to the left. This is fundamentally similar to most imperative languages, especially ones that bolt on an &lt;code&gt;auto&lt;/code&gt; or &lt;code&gt;var&lt;/code&gt; keyword later in their design. We&apos;ll see if I come to regret this decision when I get into more complex collections, but I think it&apos;s an appropriate tradeoff.&lt;/p&gt;
&lt;p&gt;Struct-style product types were an easy choice, but it took me a little while to decide on my sum type. Originally in the interest of a simple language I considered something along the lines of variant records, as &lt;a href=&quot;https://journal.stuffwithstuff.com/2023/08/04/representing-heterogeneous-data/&quot;&gt;laid out by Bob Nystrom &lt;/a&gt;. I never implemented this idea completely, instead writing something that was an unholy combination of a variant record and a Rust enum. You could access each variant like a field, but it returned a nullable result. Once I was actually trying to write programs, I realized I wanted a proper sum type and implemented basic pattern-matching over my enums. That brings us to structs and enums, with limited pattern matching over the latter.&lt;/p&gt;
&lt;p&gt;Very early on I decided that this language wouldn&apos;t permit mutable aliasing. Aside from the correctness and performance benefits, mandating that mutable references are exclusive makes code easier to read. I considered trying to learn about mutable value semantics because of interest in &lt;a href=&quot;https://www.hylo-lang.org/&quot;&gt;Hylo&lt;/a&gt; and &lt;a href=&quot;https://www.scattered-thoughts.net/writing/ruminating-about-mutable-value-semantics&quot;&gt;Zest&lt;/a&gt;, but they were out of my comfort zone[^recurse]. I&apos;ve opted for the more familiar Rust-style move semantics. Types may either be cheaply copied or are treated as affine[^affine], but not both.&lt;/p&gt;
&lt;p&gt;[^recurse]: I could see myself revisiting this decision at some point in my batch at the Recurse Center, but currently my plate is pretty full without mutable value semantics.
[^affine]: I wish the language around &lt;a href=&quot;https://en.wikipedia.org/wiki/Substructural_type_system&quot;&gt;substructural type systems&lt;/a&gt; was less opaque. Please check out &lt;a href=&quot;https://without.boats/blog/ownership/&quot;&gt;Without Boats&apos; post &amp;quot;Ownership&amp;quot;&lt;/a&gt;. It is the clearest explanation of &amp;quot;affine&amp;quot; and &amp;quot;linear&amp;quot; types I have read.&lt;/p&gt;
&lt;p&gt;Unlike Rust, I have decided that borrows are not a first-class type. They cannot be stored in user types, added to collections, returned from functions, or assigned to variables. Allowing borrows to potentially escape the scope they&apos;re created in makes borrow-checking much harder. As a result I don&apos;t plan to need lifetime annotations on borrows, which saves quite a bit of complexity and learning curve. Each borrow is limited entirely to its original lexical scope, and borrows may not be reassigned once created. As a result borrow-checking is a few hundred lines of code, and should be much less daunting to newcomers.&lt;/p&gt;
&lt;p&gt;&amp;lt;aside&amp;gt;&lt;/p&gt;
&lt;p&gt;Second-class borrows will mean second-class slices. That&apos;s fine in many cases, but I&apos;m worried it will end up feeling restricted. If that bears out then my (unformed) plan is for &amp;quot;view types&amp;quot;, which share reference counts and locks with their parent collection. This way you could create (in Rust parlance) an &lt;code&gt;Arc&amp;lt;RwLock&amp;lt;Vec&amp;lt;T&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; once, and then have many &lt;code&gt;Arc&amp;lt;RwLock&amp;lt;[T]&amp;gt;&amp;gt;&lt;/code&gt; instances which reference it. This should prevent mutable aliasing, while regrettably losing a bit of static verifiability.&lt;/p&gt;
&lt;p&gt;&amp;lt;/aside&amp;gt;&lt;/p&gt;
&lt;p&gt;The backend for the language is WASM[^interpreter]. It lets me target the browser or desktop with relative ease, and is totally cross-platform. So far it seems easy to emit and fast enough for my needs. My biggest frustration is the distinction between the program stack and linear memory; I understand the reason (security, ability to optimize, etc) but it does make reference types fairly annoying.&lt;/p&gt;
&lt;p&gt;[^interpreter]: There&apos;s also a tree-walking interpreter that runs on the lower-level IR directly. I wrote this early in development so I could build out the language in vertical slices. It&apos;s slow and not intended for actual use, and has mostly served its purpose now that I emit WASM. The next time it slows down development I&apos;ll probably delete it.&lt;/p&gt;
&lt;p&gt;Speed of execution has mostly worked out to my liking as a result of earlier decisions. When the types are known at compile time the memory layouts are as well, which makes emitted code pretty simple. I haven&apos;t added any optimization yet; I think there should be some significant low-hanging fruit once I decide to start.&lt;/p&gt;
&lt;p&gt;Iteration speed also has just sort of worked out. The compiler is written in Rust and makes heavy use of &lt;a href=&quot;https://github.com/rayon-rs/rayon&quot;&gt;rayon&lt;/a&gt;: files are parsed and typechecked in parallel, and then functions are desugared, borrow-checked, and lowered to the &amp;quot;linear IR&amp;quot; in parallel. Code isn&apos;t emitted in parallel, but it could be without much of a change. Compiling to WASM also means that I can implement hot-reloading quite easily. All that I need to do is create a new WASM instance and copy the memory from one instance to the other. I&apos;ve already had fun writing a very tiny platformer character controller without having to close the running game.&lt;/p&gt;
&lt;h2&gt;Naming the Damn Thing&lt;/h2&gt;
&lt;p&gt;I&apos;ve been working on this project on-and-off for about eight months. It&apos;s now far enough along to write small toys, and I&apos;ve begun writing a game. What I still don&apos;t have is a name! The first name I picked was &amp;quot;brick&amp;quot;, a non-trademark-infringing nod to &lt;a href=&quot;https://en.wikipedia.org/wiki/Lego&quot;&gt;a toy that you use to build toys&lt;/a&gt;. After a while I discovered &lt;a href=&quot;https://github.com/brick-lang/brick&quot;&gt;there&apos;s already a hobby PL project with that name&lt;/a&gt;, albeit one that seems to have been abandoned six years ago. I&apos;d like to avoid a name collision if possible, but have found no other name candidate that called strongly to me. I&apos;ve considered:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;quot;ludus&amp;quot;, Latin for &amp;quot;game&amp;quot;. Doesn&apos;t sound fun though, it sounds like Latin&lt;/li&gt;
&lt;li&gt;&amp;quot;pyra&amp;quot;, as a shortening of &amp;quot;pyrite&amp;quot;. This is more of an inside joke with my name, but some surveying of friends turns out that the initial letters &amp;quot;py&amp;quot; strongly point to some association with Python&lt;/li&gt;
&lt;li&gt;&amp;quot;mortar&amp;quot;, suggested by a friend if I couldn&apos;t take &amp;quot;brick.&amp;quot; It has &lt;a href=&quot;https://github.com/tonoy30/mortar&quot;&gt;a name collision&lt;/a&gt; (though an even more abandoned, less-used one) and doesn&apos;t have much going for it outside of an allusion to an allusion.&lt;/li&gt;
&lt;li&gt;&amp;quot;block&amp;quot;, for the same reason as &amp;quot;brick&amp;quot;. Even worse name collisions: &amp;quot;block programming&amp;quot; is how &lt;a href=&quot;https://developers.google.com/blockly&quot;&gt;many&lt;/a&gt; &lt;a href=&quot;https://www.codejig.com/en/block-based-coding/&quot;&gt;visual&lt;/a&gt; &lt;a href=&quot;https://www.codewizardshq.com/what-is-block-coding/&quot;&gt;programming&lt;/a&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Scratch_(programming_language)&quot;&gt;languages&lt;/a&gt; refer to themselves. Not to mention endless potential confusion over &amp;quot;blockchain&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ideally a name would make some reference to the just-for-fun nature of the language. Secondarily I considered something that would obviously scan as a &amp;quot;smaller Rust&amp;quot;, but none of my ideas (&amp;quot;tarnish&amp;quot;, &amp;quot;oxidize&amp;quot;, etc) appealed to me. At this point I&apos;m weighing going back to &amp;quot;brick&amp;quot;, but I&apos;d really like to avoid the name collision. If you have any suggestions for names, please feel free to &lt;a href=&quot;ryan@ryanisaacg.com&quot;&gt;send them my way&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;In future posts I plan to elaborate on specifics like the design of the compiler, linking the runtime, the language server, and features like coroutines or interfaces (both currently half-working).&lt;/p&gt;
</content:encoded></item><item><title>Recurse Center: Week 1</title><link>https://ryanisaacg.com/code/recurse_week_1/</link><guid>https://ryanisaacg.com/code/recurse_week_1/</guid><description>I&apos;m one week in to my batch at the Recurse Center! Here&apos;s what I&apos;ve done and learned so far.</description><pubDate>Mon, 08 Jul 2024 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I&apos;m one week in to my &lt;a href=&quot;hello-recurse&quot;&gt;batch at the Recurse Center&lt;/a&gt;! Here&apos;s what I&apos;ve done and learned so far.&lt;/p&gt;
&lt;p&gt;Monday and Tuesday were a little more orientation-y last week, so I got to virtually meet a lot of folks from my batch and get a sense of what other people are working on. Despite coming in with no interest or experience in audio programming, the enthusiasm of some other folks may sway me to try to learn digital audio basics over the next 11 weeks.&lt;/p&gt;
&lt;p&gt;My first project was a tiny, practical one: &lt;a href=&quot;https://github.com/ryanisaacg/hindsight&quot;&gt;Hindsight&lt;/a&gt;, a timer app that reminds me to take a 20 second break every 20 minutes. It&apos;s my first time writing any Swift, so I&apos;m sure it&apos;s unidiomatic as all heck. There are plenty of improvements I&apos;d like to make (only start the timer when I&apos;m back at my keyboard, be smarter about detecting whether I&apos;m in a video / audio call, don&apos;t have the SwiftUI &amp;quot;hello world&amp;quot; window open all the time) but they&apos;re not big priorities for me right now. It&apos;s good enough!&lt;/p&gt;
&lt;p&gt;I wrote &lt;a href=&quot;https://github.com/ryanisaacg/catalog&quot;&gt;a memory-mapped B+Tree in Rust&lt;/a&gt; following along &lt;a href=&quot;https://build-your-own.org/database/&quot;&gt;&amp;quot;Build Your Own Database From Scratch in Go&amp;quot;&lt;/a&gt;. Along the way I learned what &amp;quot;logs&amp;quot; mean in the context of databases, the difference between a B+Tree and an LSM tree, and the impact of disk sectors on small IO performance. Overall this was pretty fun: it involved a lot more use of &lt;code&gt;unsafe&lt;/code&gt; in Rust than I would normally make. Unfortunately that&apos;s also a sign that a B+Tree isn&apos;t a great fit for Rust &lt;a href=&quot;https://github.com/rust-lang/rust/issues/27090#issuecomment-122345671&quot;&gt;(because you have to copy the keys around)&lt;/a&gt; and that memory mapping isn&apos;t super ergonomic in Rust (because managing allocations in a fixed buffer is pretty annoying).&lt;/p&gt;
&lt;p&gt;For that reason I&apos;m going to stop the project before the second half of the book, and instead follow along the &lt;a href=&quot;https://app.codecrafters.io/courses/sqlite/overview&quot;&gt;CodeCrafters Build Your Own SQLite&lt;/a&gt; course with some of my batchmates. For the CodeCrafters course I&apos;m planning to use Zig, because this seems like a perfect opportunity to tear myself away from Rust for a second and explore. My last attempt to use Zig ended because I was frustrated with its choice of abstractions, but a more guided approach might ease me in.&lt;/p&gt;
&lt;p&gt;Later in the week I paired on Tim&apos;s &lt;a href=&quot;https://github.com/ttiimm/log2src&quot;&gt;log2src&lt;/a&gt; project and drove while we did some refactoring. It&apos;s &lt;em&gt;super cool&lt;/em&gt; to watch the debugger integration: you can step through the logs line-by-line, and VSCode highlights what line of your program printed the log. It even reconstructs the most likely call stack to get to that log point! I would never have thought that was even possible.&lt;/p&gt;
&lt;p&gt;I also worked on the language server for my (as of yet unnamed) &lt;a href=&quot;https://github.com/ryanisaacg/my-programming-language/&quot;&gt;hobby programming language&lt;/a&gt;. Expect a more in-depth post about the language and my LSP work on it later!&lt;/p&gt;
&lt;p&gt;My only regret for week 1 is that I wasn&apos;t social enough. I spent too long heads down and not enough time pairing and hanging out. My main goals for week 2 are to change that, to make lots of progress on the SQLite course, and to maybe start reading about digital audio.&lt;/p&gt;
</content:encoded></item><item><title>How to add a custom LSP server to nvim-lspconfig</title><link>https://ryanisaacg.com/code/nvim-lspconfig-custom-lsp/</link><guid>https://ryanisaacg.com/code/nvim-lspconfig-custom-lsp/</guid><description>Normally the nvim-lspconfig package has every language server I could possibly want, so I&apos;ve found it pretty low maintenance. Currently I&apos;m testing out the server for my own programming language, and I needed to add the LSP to my editor&apos;s config. It was a surprisingly annoying task! I wanted to share the little snippet I used to get it configured.</description><pubDate>Fri, 05 Jul 2024 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Normally the &lt;a href=&quot;https://github.com/neovim/nvim-lspconfig&quot;&gt;&lt;code&gt;nvim-lspconfig&lt;/code&gt; package&lt;/a&gt; has every language server I could possibly want, so I&apos;ve found it pretty low maintenance. Currently I&apos;m testing out the server for my own programming language, and I needed to add the LSP to my editor&apos;s config. It was a surprisingly annoying task! I wanted to share the little snippet I used to get it configured.&lt;/p&gt;
&lt;p&gt;Briefly I considered forking &lt;code&gt;nvim-lspconfig&lt;/code&gt; and adding my LSP&apos;s config to the &lt;code&gt;lua/lsp/server_configurations/&lt;/code&gt; folder, where all the official implementations live. I decided against because that seemed like an unnecessary hassle. Instead I searched out a way to do it from outside the plugin.&lt;/p&gt;
&lt;p&gt;First I found &lt;a href=&quot;https://github.com/neovim/nvim-lspconfig#example-custom-config&quot;&gt;a Reddit thread&lt;/a&gt; which linked to a header within the &lt;code&gt;nvim-lspconfig&lt;/code&gt; readme. That header... does not appear in the readme. A bit of trawling through the Wayback Machine got me the &lt;a href=&quot;https://web.archive.org/web/20210422212220/https://github.com/neovim/nvim-lspconfig#example-custom-config&quot;&gt;snippet I wanted&lt;/a&gt;!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local lspconfig = require&apos;lspconfig&apos;
local configs = require&apos;lspconfig/configs&apos;
-- Check if it&apos;s already defined for when reloading this file.
if not lspconfig.foo_lsp then
  configs.foo_lsp = {
    default_config = {
      cmd = {&apos;/home/ashkan/works/3rd/lua-language-server/run.sh&apos;};
      filetypes = {&apos;lua&apos;};
      root_dir = function(fname)
        return lspconfig.util.find_git_ancestor(fname) or vim.loop.os_homedir()
      end;
      settings = {};
    };
  }
end
lspconfig.foo_lsp.setup{}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But that snippet didn&apos;t do anything. Ugh!&lt;/p&gt;
&lt;p&gt;After some reading through &lt;code&gt;nvim-lspconfig&lt;/code&gt;&apos;s source code, I took a wild guess: &lt;code&gt;nvim-lspconfig&lt;/code&gt; &lt;a href=&quot;https://github.com/neovim/nvim-lspconfig/blob/master/lua/lspconfig.lua#L1&quot;&gt;internally imports the config file&lt;/a&gt; through &lt;code&gt;require(&apos;lspconfig.configs&apos;)&lt;/code&gt;, but this snippet is using &lt;code&gt;require&apos;lspconfig/configs&apos;&lt;/code&gt;. Could that possibly make a difference? The answer appears to be yes, because the following is what worked for me:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;require(&apos;lspconfig.configs&apos;).my_custom_lsp = {
    default_config = {
        cmd = {&apos;path/to/my/binary&apos;},
        filetypes = {&apos;filetype&apos;};
        root_dir = function(fname)
            return lsp.util.find_git_ancestor(fname)
        end;
        settings = {};
    };
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now all I have to do is write the rest of the language server—how hard could that be?&lt;/p&gt;
</content:encoded></item><item><title>Hello Recurse! (Week 1, Day 1)</title><link>https://ryanisaacg.com/code/hello-recurse/</link><guid>https://ryanisaacg.com/code/hello-recurse/</guid><description>Today I start a 12-week batch at the Recurse Center!</description><pubDate>Mon, 01 Jul 2024 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Today I start a 12-week batch at the &lt;a href=&quot;https://www.recurse.com/&quot;&gt;Recurse Center&lt;/a&gt;!
Here at the outset my goals are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Write a toy database! I&apos;ve used databases before but never written one, and have no idea how database internals work. This is currently my main interest&lt;/li&gt;
&lt;li&gt;Explore distributed systems! I want to get some exposure to some variety beyond client/web server/database, especially streaming video.&lt;/li&gt;
&lt;li&gt;Go down a rabbit hole I don&apos;t even know yet! I hope to get carried along by an unfamiliar current, to something like natural language processing, or music/signal processing, or something else entirely.&lt;/li&gt;
&lt;li&gt;Blog often! At the very least I want to blog once a week about my experience at RC and what I&apos;m working on. If any of my projects end up interesting enough to stand alone, I wanna blog those as well.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Thus far today has been:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Orientation and learning about the internal software used to run RC&lt;/li&gt;
&lt;li&gt;Writing this blog post&lt;/li&gt;
&lt;li&gt;Getting a very basic Swift development environment working&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tomorrow I want to start on a macOS app to remind me to stretch and move around. I&apos;ve never done any real macOS or Swift programming, so my hope is that this will jar me out of my comfort zone nice and early. It also will serve the very practical purpose of keeping me healthy as I hack on my bigger projects for the rest of my batch.&lt;/p&gt;
&lt;p&gt;My batch runs from July 1 to September 20, so expect lots more posts from me as I go through RC!&lt;/p&gt;
</content:encoded></item><item><title>Neovim and VSCode</title><link>https://ryanisaacg.com/code/nvim_and_vscode/</link><guid>https://ryanisaacg.com/code/nvim_and_vscode/</guid><description>Around a year ago, I decided to use Neovim as my editor for working on Unity-based projects. After some involved setup, I thought I had everything just how I liked it. Then my autocomplete broke one too many times, and I knew it just wasn&apos;t worth the hassle. It was time to bite the bullet and use VSCode; but could I do that without giving up Vim?</description><pubDate>Sat, 30 Mar 2024 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Around a year ago, I decided to use Neovim as my editor for working on Unity-based projects. After &lt;a href=&quot;TODO&quot;&gt;some involved setup&lt;/a&gt;, I thought I had everything just how I liked it. Then my autocomplete broke one too many times, and I knew it just wasn&apos;t worth the hassle. It was time to bite the bullet and use VSCode; but could I do that without giving up Vim?&lt;/p&gt;
&lt;p&gt;Most text editors targeted towards programmer types have some kind of vim mode. Despite being an avid vim user, I never enable it. The emulation is never exact enough; invariably I’ll try something like a basic macro and completely fumble as I hit a missing feature or three. At that point I’d rather just use the basic EMacs shortcuts available in all macOS input fields. Previously I had tried a Vim plugin for VSCode and had the same disappointing experience. Neovim changed the game in Vim modes, though. The re-architecture of the project apparently allows Neovim to be fully embedded within other applications. Instead of relying on janky emulations, I can get the real thing.&lt;/p&gt;
&lt;p&gt;I installed &lt;a href=&quot;https://github.com/vscode-neovim/vscode-neovim&quot;&gt;the VSCode plugin&lt;/a&gt; and had to do some fiddling to get it recognize my &lt;code&gt;nvim&lt;/code&gt; binary (which I&apos;ve unfortunately now forgotten). Then I had to &lt;a href=&quot;https://github.com/ryanisaacg/dotfiles/commit/ef085b3b9b4749c95327fedf3f78ad6e25ac3020&quot;&gt;make a few VSCode-specific tweaks to my config&lt;/a&gt;. I skipped loading basically all my usual plugins. LSP, syntax highlighting, git change markers: all these sorts of things are built into VSCode (and won&apos;t work with the Neovim ⭤  VSCode bridge anyways). I also had to re-do all my custom keybindings (for example, opening a fuzzy finder when I hit &lt;code&gt;t&lt;/code&gt; in normal mode) to bind to VSCode actions instead. &lt;code&gt;vscode-neovim&lt;/code&gt; is a handy plugin that allows me to do that very easily.&lt;/p&gt;
&lt;p&gt;For the past few months I&apos;ve been using this setup as a daily driver. The C# autocomplete integration works out of the box, unlike in my previous Neovim setup (because it&apos;s a proprietary Microsoft extension &amp;gt;_&amp;gt;). Go-to-definition and find-references and all that are working fine. All around it&apos;s a &lt;em&gt;much&lt;/em&gt; better C# editing experience. For the other projects in our monorepo (some Terraform and Typescript, mostly), things work fine. I would prefer to be back in my natural habitat (nvim + tmux + fish) but it&apos;s more convenient to have the whole monorepo open in VSCode than to jump back and forth between environments.&lt;/p&gt;
&lt;p&gt;So on one hand, I did sorta give up on having my neovim + Unity setup from my last post. But on the other, I maybe have the best of both worlds?&lt;/p&gt;
</content:encoded></item><item><title>Using Neovim with Unity</title><link>https://ryanisaacg.com/code/nvim-and-unity/</link><guid>https://ryanisaacg.com/code/nvim-and-unity/</guid><description>In the last few years I&apos;ve switched fully to Neovim, and embraced the lua scripting and built-in LSP support. Most development I do these days tends to be TypeScript or Rust, and my editor&apos;s integration with tooling like prettier, rustfmt, rust-analyzer, and tsc is great! Having recently started doing some work in Unity, however, I discovered that I would have to get my hands dirty for a good C# experience.</description><pubDate>Wed, 26 Apr 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;In the last few years I&apos;ve switched fully to Neovim, and embraced the lua scripting and built-in LSP support. Most development I do these days tends to be TypeScript or Rust, and my editor&apos;s integration with tooling like prettier, rustfmt, rust-analyzer, and tsc is great! Having recently started doing some work in Unity, however, I discovered that I would have to get my hands dirty for a good C# experience.&lt;/p&gt;
&lt;p&gt;I started off by searching around for other people&apos;s experience using Neovim with Unity, and found &lt;a href=&quot;https://chrislabarge.com/posts/neovim-unity-engine/&quot;&gt;a decent blog post&lt;/a&gt; that walked me through the basic steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Configure Unity to send a message over a Unix socket to neovim when you want to open a file&lt;/li&gt;
&lt;li&gt;Create a script to launch neovim listening to that Unix socket&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I didn&apos;t end up using exactly the solution they provide (&lt;code&gt;nvr&lt;/code&gt; doesn&apos;t seem to be available as part of my neovim install) but after reading the documentation for nvim&apos;s &lt;code&gt;--remote&lt;/code&gt; option I was able to set up this part of the ingration fine. When I opened a file in Unity, it would pop open in my vim session.&lt;/p&gt;
&lt;p&gt;The logical next step is some sort of LSP integration. I went for the officially-supported omnisharp-roslyn and installed it on my system. The nvim-lsp documentation recommended the &lt;code&gt;omnisharp_extended&lt;/code&gt; plugin for handling go-to-definition, so I added that to my config as well. My config ended up looking like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;omnisharp = {
    cmd = {
        &amp;quot;mono&amp;quot;,
        &amp;quot;/Users/ryanisaacg/bin/omnisharp-osx/omnisharp/OmniSharp.exe&amp;quot;,
        &amp;quot;--languageserver&amp;quot;,
        &amp;quot;--hostPID&amp;quot;,
        tostring(pid),
    },
    handlers = {
        [&amp;quot;textDocument/definition&amp;quot;] = require(&apos;omnisharp_extended&apos;).handler,
    },

    -- Enables support for reading code style, naming convention and analyzer
    -- settings from .editorconfig.
    enable_editorconfig_support = true,

    -- If true, MSBuild project system will only load projects for files that
    -- were opened in the editor. This setting is useful for big C# codebases
    -- and allows for faster initialization of code navigation features only
    -- for projects that are relevant to code that is being edited. With this
    -- setting enabled OmniSharp may load fewer projects and may thus display
    -- incomplete reference lists for symbols.
    enable_ms_build_load_projects_on_demand = false,

    -- Enables support for roslyn analyzers, code fixes and rulesets.
    enable_roslyn_analyzers = false,

    -- Specifies whether &apos;using&apos; directives should be grouped and sorted during
    -- document formatting.
    organize_imports_on_format = false,

    -- Enables support for showing unimported types and unimported extension
    -- methods in completion lists. When committed, the appropriate using
    -- directive will be added at the top of the current file. This option can
    -- have a negative impact on initial completion responsiveness,
    -- particularly for the first few completion sessions after opening a
    -- solution.
    enable_import_completion = false,

    -- Specifies whether to include preview versions of the .NET SDK when
    -- determining which version to use for project loading.
    sdk_include_prereleases = true,

    -- Only run analyzers against open files when &apos;enableRoslynAnalyzers&apos; is
    -- true
    analyze_open_documents_only = false,
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and it worked pretty well! I could open up my files from Unity, have them pop open in Neovim, and they were properly integrated with the C# LSP. Unfortunately omnisharp apparently won&apos;t search your PATH for &lt;code&gt;OmniSharp.exe&lt;/code&gt;, which means that this part of my config isn&apos;t portable to other machines. Other than that, everything seemed just fine.&lt;/p&gt;
&lt;p&gt;After using this setup for a few days I ran into a problem. Whenever I created a new C# file, omnisharp would be completely borked: anything it defined was unavailable in other files and all of the imports in the new file would be marked as unresolved. I could fix the problems by restarting my entire editor, but omnisharp&apos;s long boot time makes that painful. At this point I thought was defeated and started to configure VSCode for C#. Fortunately, a new update to Neovim saved the day! In the GitHub issue someone pointed out that the issue was the LSP client not properly handling the &lt;code&gt;didChangeWatchedFiles&lt;/code&gt; message from the server. Last week Neovim added experimental support for handling this in its LSP, so once you &lt;a href=&quot;https://github.com/OmniSharp/omnisharp-roslyn/issues/2250#issuecomment-1499726992&quot;&gt;enable it in the LSP capabilities&lt;/a&gt; the new-file-problem goes away!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local capabilities = vim.tbl_deep_extend(
    &amp;quot;force&amp;quot;,
    require(&apos;cmp_nvim_lsp&apos;).default_capabilities(),
    {
        workspace = {
            didChangeWatchedFiles = {
                dynamicRegistration = true,
            },
        },
    }
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Upgrading Neovim, however, introduced a new problem. It seems like omnisharp-roslyn reports invalid tokens for the LSP semantic-highlighting feature, which trips up nvim. There&apos;s a hacky workaround I&apos;m using (that I found &lt;a href=&quot;https://nicolaiarocci.com/making-csharp-and-omnisharp-play-well-with-neovim/&quot;&gt;in a blog post&lt;/a&gt;) which manually fixes the invalid tokens; hopefully omnisharp fixes the issue upstream soon.&lt;/p&gt;
&lt;p&gt;That&apos;s essentially where I&apos;m leaving things for now: there are some hacks underlying my setup, but day-to-day everything works fine. I have a newfound appreciation for web dev tooling and the Rust project; this was definitely the most fiddly thing I&apos;ve done with my editor in quite some time.&lt;/p&gt;
</content:encoded></item><item><title>Falling in love with git bisect</title><link>https://ryanisaacg.com/code/git-bisect/</link><guid>https://ryanisaacg.com/code/git-bisect/</guid><description>Recently I found myself tracking down a handful of regressions: bugs I knew hadn&apos;t existed just a week or two before. I vaguely knew that there was a git command that could help me, but I had never really put it to serious use. Now that I have used it, I find myself falling in love with git bisect.</description><pubDate>Sun, 29 May 2022 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Recently I found myself tracking down a handful of regressions: bugs I knew hadn&apos;t existed just a week or two before. I vaguely knew that there was a git command that could help me, but I had never really put it to serious use. Now that I have used it, I find myself falling in love with &lt;code&gt;git bisect&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bisect&lt;/code&gt;, in the style of all things git, is slightly arcane and clunky but powerful nonetheless. All you have to do is tell git a known-good commit and a known-bad commit, and it will guide you through an efficient exploration of your repository&apos;s history. At each step of the process, &lt;code&gt;bisect&lt;/code&gt; presents you with a commit and asks &amp;quot;is this commit good, or bad?&amp;quot; A quick test of your system and you can produce the answer (failing tests, incorrect behavior, broken build, what have you) and inform git; it can then continue with a binary search to find the offending change.&lt;/p&gt;
&lt;p&gt;&amp;lt;aside&amp;gt;&lt;/p&gt;
&lt;p&gt;In case your runtime analysis skills are a little dusty, a binary search has an &lt;code&gt;O(log N)&lt;/code&gt; runtime to find its result. Even with 10,000 commits between your good and bad state, at most you&apos;ll have to inspect 13 to find the culprit.&lt;/p&gt;
&lt;p&gt;&amp;lt;/aside&amp;gt;&lt;/p&gt;
&lt;p&gt;You can initiate bisect with&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git bisect start&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;At any time, you can bail out of this operation with&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git bisect reset&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;which is good to keep in mind if you find yourself tangled. Now that you&apos;ve started the bisect, define the bounds by picking a commit that has &amp;quot;good&amp;quot; state and a commit that has &amp;quot;bad&amp;quot; state:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git bisect good my-good-commit&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git bisect bad my-bad-commit&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;aside&amp;gt;&lt;/p&gt;
&lt;p&gt;Git has introduced new aliases for &lt;code&gt;good&lt;/code&gt; and &lt;code&gt;bad&lt;/code&gt;: &lt;code&gt;new&lt;/code&gt; and &lt;code&gt;old&lt;/code&gt;, to allow for value-neutral bisects (like tracking down a performance improvement). I find &lt;code&gt;good&lt;/code&gt; and &lt;code&gt;bad&lt;/code&gt; to be much stronger pnuemonics, so I use them, but it&apos;s good to know about the other options.&lt;/p&gt;
&lt;p&gt;&amp;lt;/aside&amp;gt;&lt;/p&gt;
&lt;p&gt;After you&apos;ve specified your commits, git will check out the midpoint and ask you to evaluate it. Do whatever you need (run tests, inspect an app, check benchmarks) and then inform git that this commit is &lt;code&gt;good&lt;/code&gt; or &lt;code&gt;bad&lt;/code&gt; with a simple &lt;code&gt;git bisect good/bad&lt;/code&gt; as desired. The process will repeat a few times until you find what you&apos;re looking for!&lt;/p&gt;
&lt;p&gt;This is where we come to a crucial caveat: your git history. I find that it&apos;s best to squash intermediary commits when merging, resulting in a clean list of working commits. It aids in history explorations like this one, and means you don&apos;t have to fight through a flurry of &amp;quot;wip: temp&amp;quot; and &amp;quot;fix lint&amp;quot; garbage commits. However, if you find yourself confronted with a commit that you cannot test, &lt;code&gt;git bisect skip&lt;/code&gt; is your friend.&lt;/p&gt;
&lt;p&gt;If you&apos;d like to learn more, the &lt;a href=&quot;https://git-scm.com/docs/git-bisect&quot;&gt;git bisect docs&lt;/a&gt; have more detail and even explore the topic of automatic bisecting. Happy hacking!&lt;/p&gt;
</content:encoded></item><item><title>Dark Mode!</title><link>https://ryanisaacg.com/code/dark-mode/</link><guid>https://ryanisaacg.com/code/dark-mode/</guid><description>If your browser is set to dark mode by default, you&apos;ve probably noticed the site looks different! I now have some dark mode CSS, so this blog isn&apos;t eye-searingly white if everything else is dark on your screen.</description><pubDate>Sun, 04 Apr 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;If your browser is set to dark mode by default, you&apos;ve probably noticed the site looks different! I now have some dark mode CSS, so this blog isn&apos;t eye-searingly white if everything else is dark on your screen.&lt;/p&gt;
&lt;p&gt;Under the hood I&apos;m using a neat CSS feature called &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties&quot;&gt;CSS variables&lt;/a&gt; to switch the colors.&lt;/p&gt;
&lt;p&gt;Unfortunately this means old posts with syntax highlighting have lost syntax highlighting, because setting up theme-specific highlights looked a little annoying. That&apos;s not really a big deal to me, but I might fix it eventually.&lt;/p&gt;
</content:encoded></item><item><title>Quicksilver and Open Source</title><link>https://ryanisaacg.com/code/quicksilver-goodbye/</link><guid>https://ryanisaacg.com/code/quicksilver-goodbye/</guid><description>So this is a post that&apos;s been bouncing around my head for a while, in one form or another. I created and maintain Quicksilver, a 2D game framework for creating games for desktop and the web. The reason I&apos;m writing this post is that I also haven&apos;t used Quicksilver to make anything for over a year.</description><pubDate>Tue, 13 Oct 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;So this is a post that&apos;s been bouncing around my head for a while, in one form or another. I created and maintain &lt;a href=&quot;https://github.com/ryanisaacg/quicksilver&quot;&gt;Quicksilver&lt;/a&gt;, a 2D game framework for creating games for desktop and the web. The reason I&apos;m writing this post is that I also haven&apos;t &lt;em&gt;used&lt;/em&gt; Quicksilver to make anything for over a year.&lt;/p&gt;
&lt;p&gt;TL;DR: Quicksilver has been a source of great joy and frustration for me, and was my first real experience with open source. I&apos;m still committed to maintaining it, but I don&apos;t think I&apos;ll be actively improving or working on it going forward.&lt;/p&gt;
&lt;h2&gt;The Project&apos;s Beginning&lt;/h2&gt;
&lt;p&gt;&amp;lt;aside&amp;gt;&lt;/p&gt;
&lt;p&gt;What follows is a quick history of Quicksilver, and why I wanted to make it. I&apos;ve never written it all down in one place before, and I figured now was a good opportunity. If you just want the details on what&apos;s next, feel free to &lt;a href=&quot;#so-long&quot;&gt;skip this section.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;/aside&amp;gt;&lt;/p&gt;
&lt;p&gt;From the start of my game-making hobby, I wanted a few things: to make small games, to be able to run them on low-powered hardware, and to be able to share them on the web. This was the beginning of my troubles.&lt;/p&gt;
&lt;p&gt;First I tried game engines, like GameMaker (which was actually my first programming environment), Unity, and later Godot. A few things about them frustrated me: the closed-source nature of Unity, Godot&apos;s idiosyncratic custom scripting language (I understand this has improved), and being forced to lay my code out the way the engine wanted it. Ideally I would write the core of the gameplay code however I liked, and then add hooks to use for the engine tools. The paradigm of a game engine (a tool designed for teams, not soloists) wanted the opposite: everything should flow from the engine itself. To each their own, I guess.&lt;/p&gt;
&lt;p&gt;Game frameworks fared better, but inevitably something bothered me enough to switch. When I was using LibGDX and Java, distributing the Java binaries was a struggle. When I was using MonoGame and C#, cross-platform development on Linux was painful. Any dynamically typed programming language would eventually push me away after hours wasted tracking down a trivial bug. Even when I found a satisfactory programming language, often the game development ecosystem was sorely lacking (this is what drove me from D). And after all that, most game frameworks didn&apos;t support sharing my game on the web.&lt;/p&gt;
&lt;p&gt;I tried developing for the web directly, rather than relying on translation layers or compilation steps. I made a few little things, but I never really could commit. This was before I was a web programmer by trade, so I spent a lot of time confused and annoyed. In the five or so years since Javascript has become a joy to use, as long as you&apos;re willing to put up with byzantine build tools. Without these niceties I found it to be a pain; modularity didn&apos;t exist (just link the script files into your HTML), odd typing decisions constantly bit me (did you know that the Canvas 2D API treats NaN as 0 when drawing?), and I missed something about having a native executable build I could email someone, and run with a single click.&lt;/p&gt;
&lt;p&gt;In mid-2017, Rust was where I finally settled, because it gave me two things: easy native-executable distribution, and a web compilation option. At the time, web compilation was unstable and no-one was really using it to make games; people who did tended to write bindings to the webpage by hand. Pulling in the venerable &lt;code&gt;glutin&lt;/code&gt; library for windowing on the desktop, I hand-wrote the Quicksilver-to-JS bindings for WebAssembly and got busy developing. It was buggy, it was a pain in the ass to use, and it was an absolute delight. Finally, native code running in the browser! I published my new library in the beginning of 2018, and slowly other people started to use it in their own work.&lt;/p&gt;
&lt;p&gt;Maintaining the JS bindings by hand was an absolute disaster. In June of 2018, I worked up the energy to switch to a library to handle the browser interactions for me. This was well before the &lt;code&gt;web-sys&lt;/code&gt; project, a comprehensive set of bindings to every browser API imaginable. When I was looking, I had two options. &lt;code&gt;stdweb&lt;/code&gt;, an ambitious project with plans to bind every single browser API to an idiomatic Rust wrapper, and &lt;code&gt;wasm-bindgen&lt;/code&gt;, a more efficient option with more maintainers, that required you to write the bindings yourself. I picked &lt;code&gt;stdweb&lt;/code&gt; for its ergonomics (much to my future dismay) and continued on, now with a much-improved workflow and a great deal more stability.&lt;/p&gt;
&lt;p&gt;At some point I realized things had to change. There were problems in the API maybe one in five new users would trip over, the backend graphics code was terrifying and unmaintainable, and &lt;code&gt;async/await&lt;/code&gt; was just around the corner. I could free myself and my users from callback hell! I set about plans for a major new API revision, and got to work. Over the summer of 2019 I laid the foundation for a set of new libraries, to abstract out the parts of Quicksilver that could live separately. By the end of the year they were pretty much all ready; over the course of Chanukah I put out a few blog updates describing them. The next big version of Quicksilver was in sight: all I had to do was re-write the entire thing to use my new foundational libraries.&lt;/p&gt;
&lt;p&gt;This year has not been a good year for progress. If I push myself, I can imagine in the next few months I could finish the API revision I started last year. Lots of things have contributed to this slowdown, and sapped my energy: a global pandemic, a move from a full-time student to a full-time worker, the worsening political situation in the United States. But I haven&apos;t lost the energy to work on side projects entirely. I&apos;m playing, running, and writing tabletop role-playing games, I&apos;m reading more than I used to, and I&apos;m playing around a little with some other hobby software. I just haven&apos;t been making games, or using Quicksilver.&lt;/p&gt;
&lt;p&gt;The work that&apos;s left isn&apos;t particularly exciting either. I need to switch away from &lt;code&gt;stdweb&lt;/code&gt; (the maintainer seems to have silently disappeared), I need to write boatloads of documentation, I need to investigate and triage a handful of bug reports, and I need to write a library to support audio on desktop and web.&lt;/p&gt;
&lt;h2&gt;So Long...&lt;/h2&gt;
&lt;p&gt;To be frank, I didn&apos;t get into open source to write software &lt;em&gt;for&lt;/em&gt; other people. If other people want software from me, they can pay me for it (which is quite literally my career). I got into open source because I was writing software for myself, and I figured other people might want to check it out. Sure, I &lt;em&gt;wanted&lt;/em&gt; people to check it out or use it. It felt great when people started using Quicksilver or posting bugs with projects they were working on. Out of all the game frameworks in the world, someone decided to use mine. How exciting!&lt;/p&gt;
&lt;p&gt;Over time my interests have drifted away from game development. I don&apos;t keep up with the indie game scene, I don&apos;t enter game jams, I don&apos;t make little weekend projects. I&apos;m not longer writing Quicksilver for myself, but I still work on it. For a while (most of last year, in fact), working on the framework was a hobby unto itself. I was solving fun new challenges, and it was great! As the fun new challenges got solved, I became less and less interested, and the things that had been tiny pain points before became less and less bearable.&lt;/p&gt;
&lt;p&gt;What makes it all worse is that Quicksilver will never be &lt;em&gt;done.&lt;/em&gt; There will always be one more feature, one more request, one more corner to polish. This summer, I was realizing that, and open source burnout was finally catching up with me. Every time I opened the issue tracker or my own notes I would feel dread, and close it without writing a line of code. The abstract idea of happy users was no longer enough to sustain me. I still haven&apos;t even reached feature parity with the old, non-async version of Quicksilver, and I&apos;m not sure I ever will.&lt;/p&gt;
&lt;p&gt;At some point it struck me: over three years, I had slowly moved from writing software that I was sharing with other people to writing software for other people. Unless things change, I don&apos;t see myself writing more features for Quicksilver. I can&apos;t promise sound support, or new documentation, or a smooth migration from &lt;code&gt;stdweb&lt;/code&gt; to &lt;code&gt;web-sys&lt;/code&gt;. If I can find the time and energy, I might package up the current alpha into an actual release, but I won&apos;t promise that either.&lt;/p&gt;
&lt;p&gt;For now, I have no problem &lt;em&gt;maintaining&lt;/em&gt; software. I&apos;ll be sticking around to triage bug reports, review pull requests, and cut releases (on Quicksilver, all its associated libraries, and Winit). Quicksilver isn&apos;t going anywhere- but it&apos;s important I make this explicit. It&apos;s also not &lt;em&gt;going anywhere&lt;/em&gt;. I have no plans to fix the handful of outstanding bugs, or the feature requests, or upstream improvements to other projects.&lt;/p&gt;
&lt;p&gt;Here it is important to mention &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_factor&quot;&gt;the Bus Factor&lt;/a&gt;. Essentially: how many people have to get hit by a bus for your project to completely grind to a halt? In the case of Quicksilver, it has always been 1. Don&apos;t get me wrong, other people have certainly contributed! Every well-crafted bug report or pull request has great value. At the end of the day, however, I&apos;m still the single point of failure. That was never going to be a sustainable project structure, and I urge people to consider this concept in open source more generally.&lt;/p&gt;
&lt;h2&gt;...And Thanks for all the Fish&lt;/h2&gt;
&lt;p&gt;I don&apos;t want to give the impression that I regret the project, or wish I hadn&apos;t done it. Quicksilver was a great project for me to hold on to throughout my time as an undergraduate, and I hope it as brought other people a little bit of the joy it brought me. It couldn&apos;t have gotten where it was without the Rust community; thank you to the 40 (!) other people who contributed commits, the countless people who filed bugs, and everyone who said kind things online. From the bottom of my heart: thank you.&lt;/p&gt;
&lt;p&gt;If you&apos;re using Quicksilver and it works for you, rock on. If you&apos;re looking for something else in light of this, I totally understand. For all the reasons mentioned above, I&apos;m not really plugged in to what the best game-development alternatives are, though I&apos;ve heard &lt;a href=&quot;https://github.com/bevyengine/bevy&quot;&gt;bevy&lt;/a&gt; is doing exciting new things.&lt;/p&gt;
&lt;p&gt;Good luck, have fun, and make great things.&lt;/p&gt;
</content:encoded></item><item><title>A New Quicksilver Crate, Elefont</title><link>https://ryanisaacg.com/code/announcing-elefont/</link><guid>https://ryanisaacg.com/code/announcing-elefont/</guid><description>This blog post has been a long time delayed, but late is better than never! The Quicksilver alpha is humming along, with bugs and API problems being addressed. While that work continues, I want to unveil elefont, a crate that I&apos;ve developed for font caching.</description><pubDate>Fri, 10 Jul 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;This blog post has been a long time delayed, but late is better than never! The Quicksilver alpha is humming along, with bugs and API problems being addressed. While that work continues, I want to unveil &lt;code&gt;elefont&lt;/code&gt;, a crate that I&apos;ve developed for font caching.&lt;/p&gt;
&lt;h2&gt;What is Elefont?&lt;/h2&gt;
&lt;p&gt;Elefont is a glyph caching layer, intended to reduce round-trips to the GPU when rendering text.
When a glyph is sent to the GPU, it is stored on a texture and re-used until the cache needs to be refreshed.
Elefont is also designed to support many different font providers, and many different graphics backends: you can currently choose to render with &lt;a href=&quot;https://gitlab.redox-os.org/redox-os/rusttype&quot;&gt;rusttype&lt;/a&gt; or &lt;a href=&quot;https://github.com/mooman219/fontdue/&quot;&gt;fontdue&lt;/a&gt;, and there are plans to &lt;a href=&quot;https://github.com/ryanisaacg/elefont/issues/5&quot;&gt;support bitmap fonts&lt;/a&gt; and &lt;a href=&quot;https://github.com/ryanisaacg/elefont/issues/3&quot;&gt;operating-system-specific font toolkits via font_kit&lt;/a&gt;.
It is designed for use primarily in games, because it was written for Quicksilver, and the design reflects that. A GUI toolkit can probably choose a specific font rendering toolkit and use it throughout, but games tend to have more idiosyncratic text requirements (like bitmap fonts.)&lt;/p&gt;
&lt;h2&gt;What is Glyph Caching?&lt;/h2&gt;
&lt;p&gt;Glyph caching is an approach to font rendering that stores each &amp;quot;glyph&amp;quot; (font image) on the GPU.&lt;/p&gt;
&lt;p&gt;&amp;lt;aside&amp;gt;&lt;/p&gt;
&lt;p&gt;Human writing is vast and complex, and so are the systems we have built to digitize it. A &amp;quot;glyph&amp;quot; is not the same as a &amp;quot;character;&amp;quot; this may surprise people who exclusively use Latin script. For example, Unicode emoji support &lt;a href=&quot;https://emojipedia.org/emoji-modifier-sequence/&quot;&gt;skin-tone modifiers&lt;/a&gt;. These are separate Unicode code-points that are placed &lt;em&gt;after&lt;/em&gt; the emoji code-point, and modify the image that is produced. Other familiar examples include all-caps fonts: &apos;A&apos; and &apos;a&apos; are different characters, but may be represented by the same glyph. For more on the complexity of text rendering, see &lt;a href=&quot;https://gankra.github.io/blah/text-hates-you/&quot;&gt;Text Rendering Hates You&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&amp;lt;/aside&amp;gt;&lt;/p&gt;
&lt;p&gt;Most fonts are stored in files like &apos;TTF&apos; or &apos;OTF&apos;. These are called &apos;vector fonts,&apos; because the glyphs are stored as a series of strokes; similar technology powers SVG images or Adobe Flash graphics. Every time you render a glyph from one of these fonts, the font system uses a &apos;rasterizer&apos; to turn the strokes of the glyph into a grid of pixel color values. This is a fairly expensive operation, so glyph caches store this resulting bitmap instead of re-generating it every time the character is used. Elefont helps in this case by keeping track of a map of glyphs to their rendered counterparts.&lt;/p&gt;
&lt;p&gt;Even if you&apos;re using a &amp;quot;bitmap font&amp;quot; (a font defined by pixel image data instead of vector graphics), you still have to send that image data to the GPU. With the machinery already in place to map from glyphs to rendered images, Elefont can help in this case by keeping track of a map of glyphs to their GPU-side counterparts. This is a high priority for a future version, but isn&apos;t written yet.&lt;/p&gt;
&lt;h2&gt;Why not use X?&lt;/h2&gt;
&lt;p&gt;Initially, I didn&apos;t expect to write Elefont or anything similar. I knew that Quicksilver 0.4 would need glyph caching, because fonts and text were a significant pain point in Quicksilver 0.3. What I did not find was anything that fit my requirements:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Work with any graphics backend. Quicksilver uses &lt;code&gt;golem&lt;/code&gt;, my abstraction layer over OpenGL, so being tied to another graphics library was a no-go&lt;/li&gt;
&lt;li&gt;Work with any font provider. Users may have bitmap fonts or vector fonts; they may want system-native font rendering (with some web fallback); they may want the more mature rusttype or the more ambitious fontdue, etc.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There were other options that pass requirement 1, chief among them &lt;a href=&quot;https://crates.io/crates/glyph-brush&quot;&gt;glyph_brush&lt;/a&gt;. However, glyph_brush is tied into rusttype, and doesn&apos;t seem to be interested in supporting bitmap fonts or other rasterizers. For many uses, glyph_brush is the right choice! However, it just couldn&apos;t fit my needs. Bitmap fonts are a fairly common request when rendering for games, and a design that precludes them is a missed opportunity.&lt;/p&gt;
&lt;h2&gt;What Comes Next?&lt;/h2&gt;
&lt;p&gt;(Hopefully soon) I&apos;ll be putting out a State of Quicksilver update, that generally addresses progress the project has made this year!&lt;/p&gt;
</content:encoded></item><item><title>Website Makeover, Again</title><link>https://ryanisaacg.com/code/new-blog-2/</link><guid>https://ryanisaacg.com/code/new-blog-2/</guid><description>Out with the old, in with the new! After some frustration with Hugo, I&apos;ve moved to Zola and some light CSS.</description><pubDate>Sun, 24 May 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Out with the old, in with the new! After some frustration with Hugo, I&apos;ve moved to &lt;a href=&quot;https://www.getzola.org/&quot;&gt;Zola&lt;/a&gt; and some light CSS.&lt;/p&gt;
&lt;p&gt;I wanted to write a new blog post regarding &lt;a href=&quot;https://github.com/ryanisaacg/elefont&quot;&gt;elefont&lt;/a&gt; and Quicksilver&apos;s new text rendering system, but I  was dreading making a post on the site. Hugo had proved opaque and fragile for me, and its blizzard of configuration options wasn&apos;t making things much easier. Plus, something small broke when I tried to use the latest Hugo version on Windows to re-build the site. I wasn&apos;t much interested in tracking down a changelog and bringing my blog up to the latest version, so I decided Hugo had to go.&lt;/p&gt;
&lt;p&gt;Initially I considered writing my own static site generator. &lt;em&gt;How hard could it be?&lt;/em&gt; I asked myself. Then I thought about generating an RSS feed, and parsing front-matter, and maybe setting up a SASS compilation pipeline. &lt;em&gt;No thanks!&lt;/em&gt; I instead settled on Zola, primarily because it seems to be the right combination of simple and expressive. Secondarily, it&apos;s written in Rust, which I appreciate. Using Zola has been very nice so far; I feel more like I&apos;m programming a little language designed to make website-making easy. Previous experiences with Hugo and Jekyll felt more like wrestling the generator into doing what I wanted; Zola is a breath of fresh air by comparison.&lt;/p&gt;
&lt;p&gt;Currently the site is very light on styling. So far I like the look of it, but for how long is anyone&apos;s guess.&lt;/p&gt;
&lt;p&gt;I hope this means I can get some posts up about Quicksilver soon; there&apos;s been a lot of evolution since the end of last year, when I was just starting on the new alpha versions. I ended up forgoing a State of Quicksilver 2020, for a few reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;../quicksilver-chanukah-2019&quot;&gt;The Quicksilver Chanukah posts&lt;/a&gt; covered a lot of my plans&lt;/li&gt;
&lt;li&gt;I wanted to wait until the 0.4 release is closer to feature-complete&lt;/li&gt;
&lt;li&gt;And mostly, I&apos;ve been very busy&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Post-script update, as of June 8th 2020: The blog is a bit more automatic! Previously I was just pushing up new built versions of the site to Github Pages, but that gets tedious. I set up Github Actions to run on any push to ryanisaacg/blog on master; now the blog is automatically built and deployed.&lt;/p&gt;
</content:encoded></item><item><title>A Quicksilver Chanukah, Day 8: Rust Gamedev and the Web</title><link>https://ryanisaacg.com/code/quicksilver-chanukah-2019-day-8/</link><guid>https://ryanisaacg.com/code/quicksilver-chanukah-2019-day-8/</guid><description>This year has been great for Rust gamedev on the web. Huge progress has been made towards a full game stack being available more-or-less &quot;for free:&quot; most of the foundational crates have available web support, in one way or another.</description><pubDate>Sun, 29 Dec 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;This year has been great for Rust gamedev on the web. Huge progress has been made towards a full game stack being available more-or-less &amp;quot;for free:&amp;quot; most of the foundational crates have available web support, in one way or another.&lt;/p&gt;
&lt;h2&gt;Windowing and Input&lt;/h2&gt;
&lt;p&gt;For opening a window and receiving events from it, the Rust ecosystem has &lt;a href=&quot;https://github.com/rust-windowing/winit&quot;&gt;&lt;code&gt;winit&lt;/code&gt;&lt;/a&gt;. Along with &lt;a href=&quot;https://github.com/hecrj&quot;&gt;Héctor Ramón (hecrj)&lt;/a&gt; and and &lt;a href=&quot;https://github.com/blm768&quot;&gt;Ben Merritt (blm768)&lt;/a&gt;, I worked on adding web support. &lt;a href=&quot;https://users.rust-lang.org/t/winit-0-20-and-web-support/36155&quot;&gt;It has been merged and released&lt;/a&gt;, and is used in &lt;a href=&quot;https://github.com/hecrj/coffee&quot;&gt;coffee&lt;/a&gt; and &lt;a href=&quot;https://github.com/ryanisaacg/blinds&quot;&gt;blinds&lt;/a&gt;. While using &lt;code&gt;winit&lt;/code&gt; directly does require some glue code to plug your canvas into the webpage, intermediate layers like game frameworks can take care of the details.&lt;/p&gt;
&lt;p&gt;While &lt;code&gt;winit&lt;/code&gt; doesn&apos;t currently provide gamepad events, &lt;a href=&quot;https://gitlab.com/gilrs-project/gilrs&quot;&gt;&lt;code&gt;gilrs&lt;/code&gt;&lt;/a&gt; fills that gap nicely. In the beginning of the year I added web support via stdweb, which should translate to &lt;code&gt;wasm-bindgen&lt;/code&gt; when necessary. Unlike &lt;code&gt;winit&lt;/code&gt;, which requires a little glue code to connect to your webpage, &lt;code&gt;gilrs&lt;/code&gt; Just Works. It functions nearly the same as the desktop version, with the only limitations being those the web platform imposes.&lt;/p&gt;
&lt;h2&gt;Graphics&lt;/h2&gt;
&lt;p&gt;When it comes to graphics on the web, there are two APIs to keep in mind. One is WebGL, which is the current way of writing graphics code for the web. The other is WebGPU, an evolving standard based on newer, more modern APIs that will be the way forward. Currently WebGPU is just in the draft phase, so we can&apos;t target it just yet. Targeting WebGL directly is an option, but it seems like a waste to write OpenGL code for desktop and then again for web. Enter &lt;a href=&quot;https://github.com/grovesNL/glow&quot;&gt;&lt;code&gt;glow&lt;/code&gt;&lt;/a&gt;, which brings a unified API across destop and WebGL.&lt;/p&gt;
&lt;p&gt;Built on top of &lt;code&gt;glow&lt;/code&gt; is &lt;code&gt;gfx-backend-gl&lt;/code&gt;, which brings &lt;a href=&quot;https://github.com/gfx-rs/gfx&quot;&gt;&lt;code&gt;gfx-hal&lt;/code&gt;&lt;/a&gt; to desktop GL and web. By extension comes &lt;a href=&quot;https://github.com/gfx-rs/wgpu-rs&quot;&gt;&lt;code&gt;wgpu&lt;/code&gt;&lt;/a&gt;, an idiomatic Rust implementation of the upcoming WebGPU specification. It uses WebGL for now, but when WebGPU is stabilization and available, we&apos;ll have a modern graphics API that works seamlessly across desktop and web.&lt;/p&gt;
&lt;h2&gt;Audio&lt;/h2&gt;
&lt;p&gt;The audio story for Rust on the web is not there yet, unfortunately. &lt;a href=&quot;https://github.com/RustAudio/cpal&quot;&gt;&lt;code&gt;cpal&lt;/code&gt;&lt;/a&gt;, a cross-platform library for Rust audio, doesn&apos;t have web support yet. However, there is hope! &lt;a href=&quot;https://nannou.cc/posts/moss_grant_announce&quot;&gt;Mozilla announced a grant to Nannou&lt;/a&gt; that includes web support in &lt;code&gt;cpal&lt;/code&gt; as a core goal. The relevant issue is &lt;a href=&quot;https://github.com/RustAudio/cpal/issues/212&quot;&gt;cpal #212&lt;/a&gt;, which will hopefully yield some information early next year.&lt;/p&gt;
&lt;p&gt;That&apos;s it for my updates! This was a good year for Rust on the web, and laid the groundwork for the changes I&apos;ve talked about in Quicksilver. I&apos;ll be back in the new year with a State of Quicksilver 2020, which should come along with an alpha release of the new Quicksilver version.&lt;/p&gt;
&lt;p&gt;If you&apos;re interested in updates from other places in the Rust ecosystem, check out the &lt;a href=&quot;https://wiki.alopex.li/TheStateOfGGEZ2020&quot;&gt;State of GGEZ 2020&lt;/a&gt; and the &lt;a href=&quot;https://rust-gamedev.github.io/&quot;&gt;Rust Gamedev Working Group&apos;s newsletters&lt;/a&gt;. See you in the new year!&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;quicksilver-chanukah-2019&quot;&gt;The introduction post&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;quicksilver-chanukah-2019-day-2&quot;&gt;&lt;code&gt;platter&lt;/code&gt;: An async file-loading API for desktop and web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;quicksilver-chanukah-2019-day-3&quot;&gt;&lt;code&gt;gestalt&lt;/code&gt;: An API to manage bundling and saving data locally on desktop and web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;quicksilver-chanukah-2019-day-4&quot;&gt;&lt;code&gt;blinds&lt;/code&gt;: An easy-to-use async wrapper of &lt;code&gt;winit&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;quicksilver-chanukah-2019-day-5&quot;&gt;&lt;code&gt;golem&lt;/code&gt;: An opinionated mostly-safe graphics library for desktop and web GL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;quicksilver-chanukah-2019-day-6&quot;&gt;Changes to the Quicksilver application lifecycle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../quicksilver-chanukah-2019-day-7&quot;&gt;Changes to the Quicksilver graphics API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;This post!&lt;/li&gt;
&lt;/ol&gt;
</content:encoded></item><item><title>A Quicksilver Chanukah, Day 7: Quicksilver&apos;s New Graphics</title><link>https://ryanisaacg.com/code/quicksilver-chanukah-2019-day-7/</link><guid>https://ryanisaacg.com/code/quicksilver-chanukah-2019-day-7/</guid><description>The graphics API of Quicksilver isn&apos;t as dire need of a rework as the lifecycle APIs, but I wanted to take the next breaking change as an opportunity to address some long-standing issues.</description><pubDate>Sat, 28 Dec 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;The graphics API of Quicksilver isn&apos;t as dire need of a rework as the &lt;a href=&quot;../quicksilver-chanukah-2019-day-6&quot;&gt;lifecycle APIs&lt;/a&gt;, but I wanted to take the next breaking change as an opportunity to address some long-standing issues.&lt;/p&gt;
&lt;p&gt;In no particular order, they are:&lt;/p&gt;
&lt;h2&gt;Low-Level Access&lt;/h2&gt;
&lt;p&gt;As it stands, Quicksilver talks to a very specific backend design for graphics. The API is internal-only and designed to wrap up all the GL code in one place, to keep the high-level drawing APIs platform independent. There&apos;s no way to expose the raw GL API directly to the user, as the backend talks directly to OpenGL 3.2 and WebGL 1. With &lt;code&gt;glow&lt;/code&gt;, we could expose a cross-platform OpenGL context, but there are still differences between desktop and web GL. These problems, like different ways of describing the input and output in GLSL, are addressed by &lt;a href=&quot;../quicksilver-chanukah-2019-day-5&quot;&gt;&lt;code&gt;golem&lt;/code&gt; (see announcement from 2 days ago.)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Providing users access to a lower-level graphics API also frees the high-level API from trying to provide custom shader support. A custom shader is best served with custom vertex inputs, which means custom functions to turn high-level draw commands into low-level vertex data. Instead of trying to solve this problem in the general case, Quicksilver can provide the mechanism to solve it yourself.&lt;/p&gt;
&lt;h2&gt;Draw Order&lt;/h2&gt;
&lt;p&gt;The previous graphics API aggressively batches draws, including re-ordering &lt;code&gt;draw&lt;/code&gt; commands to avoid changing state while rendering. If a &lt;code&gt;z&lt;/code&gt; parameter (not included in the default, simple &lt;code&gt;draw&lt;/code&gt;) is not provided, anything goes. Hypothetically this leads to faster rendering, but it also means that many users experience unexpected results with basic operations. The new API should be built on a simple draw-order guarantee: the first draw call is drawn furthest back, with each subsequent draw lying on top of the ones before it.&lt;/p&gt;
&lt;h2&gt;Render-To-Texture&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;Surface&lt;/code&gt; API supports render-to-texture, but it has a few problems. First, the API is unintuitive: rendering to a texture only works within a closure, for example. Also, it&apos;s plain buggy. &lt;code&gt;golem&lt;/code&gt; provides a harder-to-misuse API for off-screen rendering, which can be used to build a nicer abstraction in Quicksilver itself.&lt;/p&gt;
&lt;h2&gt;Screen Resizing and Projection&lt;/h2&gt;
&lt;p&gt;The current version of Quicksilver &amp;quot;magically&amp;quot; handles the window being resized, as well as projecting and unprojecting between world and screen coordinates. Often this is more trouble than it&apos;s worth: you want your UI at one projection and letterbox, and your game content at another. By exposing a few more knobs to the user (like the GL viewport), the &lt;code&gt;ResizeStrategy&lt;/code&gt; API can be provided on top of other, orthogonal abstractions.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;../quicksilver-chanukah-2019&quot;&gt;The introduction post&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../quicksilver-chanukah-2019-day-2&quot;&gt;&lt;code&gt;platter&lt;/code&gt;: An async file-loading API for desktop and web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../quicksilver-chanukah-2019-day-3&quot;&gt;&lt;code&gt;gestalt&lt;/code&gt;: An API to manage bundling and saving data locally on desktop and web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../quicksilver-chanukah-2019-day-4&quot;&gt;&lt;code&gt;blinds&lt;/code&gt;: An easy-to-use async wrapper of &lt;code&gt;winit&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../quicksilver-chanukah-2019-day-5&quot;&gt;&lt;code&gt;golem&lt;/code&gt;: An opinionated mostly-safe graphics library for desktop and web GL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../quicksilver-chanukah-2019-day-6&quot;&gt;Changes to the Quicksilver application lifecycle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;This post!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../quicksilver-chanukah-2019-day-8&quot;&gt;An overview of the work on web support this year&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content:encoded></item><item><title>A Quicksilver Chanukah, Day 6: Quicksilver&apos;s New Lifecycle</title><link>https://ryanisaacg.com/code/quicksilver-chanukah-2019-day-6/</link><guid>https://ryanisaacg.com/code/quicksilver-chanukah-2019-day-6/</guid><description>Quicksilver has always had some major API compromises to deliver on its core promise: write a game once, and it targets desktop and the web with no changes. The two ugliest compromises are the State and Asset APIs, for managing your application&apos;s core loop and file loading, respectively.</description><pubDate>Fri, 27 Dec 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Quicksilver has always had some major API compromises to deliver on its core promise: write a game once, and it targets desktop and the web with no changes. The two ugliest compromises are the &lt;code&gt;State&lt;/code&gt; and &lt;code&gt;Asset&lt;/code&gt; APIs, for managing your application&apos;s core loop and file loading, respectively.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;State&lt;/code&gt; is a trait that Quicksilver uses to manage when your code runs. It requires you define the &lt;code&gt;new&lt;/code&gt; method, as well as &lt;code&gt;draw&lt;/code&gt;. Optionally you can define &lt;code&gt;update&lt;/code&gt;, for a fixed tick rate function, and &lt;code&gt;event&lt;/code&gt; for handling individual input events. This type then gets passed as a generic parameter to the &lt;code&gt;run&lt;/code&gt; function, which handles instantiating it and running the event loop. The downside is that the user gets very little say in how their code is arranged, but the benefit is that your code runs on web without blocking the main thread (which will lock up the tab.)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Asset&lt;/code&gt; is a wrapper around &lt;code&gt;Future&lt;/code&gt;, which is an asychronous action in Rust. The point of the &lt;code&gt;Asset&lt;/code&gt; API was to avoid users having to manually poll their futures to check if they&apos;re ready: just use an &lt;code&gt;Asset&lt;/code&gt; and its execute method, which will run a closure if its &lt;code&gt;Future&lt;/code&gt; is completed. Unfortunately, this turns out not to be very ergonomic. &lt;code&gt;Asset&lt;/code&gt; is a pain to use, and a point of confusion for most users. There&apos;s no way around asychronous file loading on the web, but new developments in Rust have made much better solutions possible.&lt;/p&gt;
&lt;p&gt;Readers of previous posts may notice that these two API problems are addressed by two of the crates I announced this week: &lt;code&gt;blinds&lt;/code&gt; to address &lt;code&gt;State&lt;/code&gt; and &lt;code&gt;platter&lt;/code&gt; to address &lt;code&gt;Asset&lt;/code&gt;. Where before, you might write something like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;struct MyState {
    images: Asset&amp;lt;Vec&amp;lt;Image&amp;gt;&amp;gt;,
    game: Game,
}

impl State for MyState {
    fn new() -&amp;gt; MyState {
        MyState {
            images: Asset::new(join_all(vec![Image::load(&amp;quot;a&amp;quot;), Image::load(&amp;quot;b&amp;quot;), Image::load(&amp;quot;c&amp;quot;)])),
            game: Game::new()
        }
    }

    fn event(&amp;amp;mut self, _win: &amp;amp;mut Window, ev: &amp;amp;Event) {
        self.images.execute(|images| {
            self.game.process_event(ev);
        });
    }

    fn update(&amp;amp;mut self, _win: &amp;amp;mut Window) {
        self.images.execute(|images| {
            self.game.update();
        });
    }

    fn draw(&amp;amp;mut self, win: &amp;amp;mut Window) {
        self.images.execute(|images| {
            self.game.draw(&amp;amp;images, win);
        });
    }
}

fn main() {
    run::&amp;lt;MyState&amp;gt;();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;you could now write something like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;async fn my_game(win: Window, mut gfx: Graphics, events: EventStream) {
    let mut game = Game::new();
    let images = join_all(vec![Image::load(&amp;quot;a&amp;quot;), Image::load(&amp;quot;b&amp;quot;), Image::load(&amp;quot;c&amp;quot;)]).await;
    loop {
        while let Some(ev) = events.next_event().await {
            game.process_event(ev);
        }
        game.update();
        game.draw(&amp;amp;mut gfx);
        gfx.present(&amp;amp;win);
    }
}

fn main() {
    run(my_game);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you want to know more, check out &lt;a href=&quot;../quicksilver-chanukah-2019-day-4&quot;&gt;my post about blinds&lt;/a&gt; for more details on the event loop and &lt;a href=&quot;../quicksilver-chanukah-2019-day-2&quot;&gt;my post about platter&lt;/a&gt; for more details on async file loading.&lt;/p&gt;
&lt;p&gt;As a side effect of the async API, the user has a lot more control over when their code runs. Previously Quicksilver managed your update timing automatically: it would aim for 60Hz by default, regardless of how long updates take. Now you&apos;re in charge of your own timing, though features to make timing fire-and-forget could become part of the final release.&lt;/p&gt;
&lt;p&gt;Speaking of releases, I hope to have a very early alpha of this version of Quicksilver out within the next week or so. It will be a very bare-bones version: just the event loop and some small graphics functions for now, which I&apos;ll go into more depth about tomorrow.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;../quicksilver-chanukah-2019&quot;&gt;The introduction post&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../quicksilver-chanukah-2019-day-2&quot;&gt;&lt;code&gt;platter&lt;/code&gt;: An async file-loading API for desktop and web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../quicksilver-chanukah-2019-day-3&quot;&gt;&lt;code&gt;gestalt&lt;/code&gt;: An API to manage bundling and saving data locally on desktop and web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../quicksilver-chanukah-2019-day-4&quot;&gt;&lt;code&gt;blinds&lt;/code&gt;: An easy-to-use async wrapper of &lt;code&gt;winit&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../quicksilver-chanukah-2019-day-5&quot;&gt;&lt;code&gt;golem&lt;/code&gt;: An opinionated mostly-safe graphics library for desktop and web GL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;This post!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../quicksilver-chanukah-2019-day-7&quot;&gt;Changes to the Quicksilver graphics API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../quicksilver-chanukah-2019-day-8&quot;&gt;An overview of the work on web support this year&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content:encoded></item><item><title>A Quicksilver Chanukah, Day 5: Golem</title><link>https://ryanisaacg.com/code/quicksilver-chanukah-2019-day-5/</link><guid>https://ryanisaacg.com/code/quicksilver-chanukah-2019-day-5/</guid><description>golem is a mostly-safe graphics API that targets OpenGL 3.2 and WebGL 1 that helps make writing GL less painful.</description><pubDate>Thu, 26 Dec 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;code&gt;golem&lt;/code&gt; is a mostly-safe graphics API that targets OpenGL 3.2 and WebGL 1 that helps make writing GL less painful.&lt;/p&gt;
&lt;h2&gt;Why &lt;code&gt;golem&lt;/code&gt; and not X&lt;/h2&gt;
&lt;p&gt;If you&apos;re just interested in what &lt;code&gt;golem&lt;/code&gt; is and how it works, feel free to skip this section!&lt;/p&gt;
&lt;p&gt;The previous three days I&apos;ve introduced new crates that mostly stood on their own. I&apos;m not aware of any fleshed-out alternatives, so creating those libraries myself doesn&apos;t require much explanation. &lt;code&gt;golem&lt;/code&gt;, however, is a different story: there aren&apos;t exactly a shortage of Rust graphics libraries. There are a variety of reasons as to why none of them fit Quicksilver&apos;s needs, most of which revolve around support for older hardware or older APIs. For brevity, I&apos;d recommend you check out &lt;a href=&quot;https://wiki.alopex.li/AGuideToRustGraphicsLibraries2019&quot;&gt;icefox&apos;s guide to the existing graphics options&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I have a test device that I think is a good benchmark for something Quicksilver-powered games should be able to target, and it doesn&apos;t support Vulkan. This eliminates &lt;code&gt;ash&lt;/code&gt; and &lt;code&gt;vulkano&lt;/code&gt; straight off the bat, and &lt;code&gt;gfx-hal&lt;/code&gt; as well. &lt;code&gt;ash&lt;/code&gt; and &lt;code&gt;vulkano&lt;/code&gt; target Vulkan directly, and &lt;code&gt;gfx-hal&lt;/code&gt;&apos;s OpenGL backend is not currently reliable enough (though I hope to see that improve!)&lt;/p&gt;
&lt;p&gt;I also want to be able to support WebGL 1, but WebGL 1 is not a very modern version of OpenGL. This makes it, for good reaon, unattractive to other libraries (like &lt;code&gt;luminance&lt;/code&gt;, which is targeting WebGL 2 in its upcoming web support). However, WebGL 2&apos;s &lt;a href=&quot;https://caniuse.com/#feat=webgl2&quot;&gt;market share&lt;/a&gt; still hovers at around 75%, which isn&apos;t ideal; notably missing from WebGL 2 support are the current verisons of Edge, Safari, and iOS Safari. Quicksilver recently transitioned to using WebGL 1 for better platform support, and I didn&apos;t want to regress by requiring a high version. This rules out &lt;code&gt;luminance&lt;/code&gt;, and presumably &lt;code&gt;glium&lt;/code&gt; (which has no current development towards web support as far as I&apos;m aware.)&lt;/p&gt;
&lt;p&gt;With just those two constraints I&apos;m out of options, so I decided to write &lt;code&gt;golem&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Mostly-Safe?&lt;/h2&gt;
&lt;p&gt;Where possible, &lt;code&gt;golem&lt;/code&gt; handles for you the complex state machine of OpenGL. In other places, it prevents you from using resources that haven&apos;t been properly set-up. In these cases, &lt;code&gt;golem&lt;/code&gt; is safe with low-overhead, removing footguns from OpenGL without slowing your code down. In others, more overhead would be required to keep the API free of &lt;code&gt;unsafe&lt;/code&gt;. Currently only two functions are marked as &lt;code&gt;unsafe&lt;/code&gt; in &lt;code&gt;golem&lt;/code&gt;&apos;s public API, but they are the only functions that draw things to the screen! This means using &lt;code&gt;unsafe&lt;/code&gt; code as a consumer of &lt;code&gt;golem&lt;/code&gt; is unavoidable, hence &amp;quot;mostly-safe.&amp;quot;&lt;/p&gt;
&lt;h2&gt;A Code Snippet&lt;/h2&gt;
&lt;p&gt;Hopefully if you&apos;re familiar with graphics APIs, this code snippet to draw a triangle to the screen will look a little familiar. If not, the comments should help you follow along!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;use blinds::*;
use golem::{
    Attribute, AttributeType, Context,
    Dimension::{D2, D4},
    ElementBuffer, GeometryMode, GolemError, ShaderDescription, ShaderProgram, VertexBuffer,
};

// The application loop, powered by the blinds crate
async fn app(
    window: Window,
    ctx: glow::Context,
    mut events: EventStream,
) -&amp;gt; Result&amp;lt;(), GolemError&amp;gt; {
    // Create a context from &apos;glow&apos;, GL On Whatever
    let ctx = &amp;amp;Context::from_glow(ctx)?;

    #[rustfmt::skip]
    // This is the data that represents the triangle
    // It&apos;s arranged how it will be passed to the GPU: each position represented as two f32 values,
    // followed by each color represented as 4 f32 values. The positions are on a scale from -1.0
    // to 1.0, which represents the viewport in OpenGL. The colors are represented as R, G, B, A,
    // on a scale from 0.0 to 1.0
    let vertices = [
        // Position         Color
        -0.5, -0.5,         1.0, 0.0, 0.0, 1.0,
        0.5, -0.5,          0.0, 1.0, 0.0, 1.0,
        0.0, 0.5,           0.0, 0.0, 1.0, 1.0
    ];
    // This is the data that indicates how to draw the vertices
    // For a simple example of one triangle, we don&apos;t gain much from this. Any order of these three
    // points will give us the same triangle. However, if we add more points (to draw a square, for
    // example), then we can write each point once while using it in multiple triangles.
    let indices = [0, 1, 2];

    // Here we create the ShaderProgram, which is some code that runs on the GPU. It determines how
    // to turn our vertex data into an actual vertex that GL understands, and how to color each
    // &apos;fragment&apos; (essentially a pixel). These are each their own little program, where the
    // information from the vertex shader is fed into the fragment shader.
    // For the purposes of making sure the shaders match, and for ensuring compatibility on desktop
    // and web, the inputs are represented as data structures and then converted to shader
    // declarations at runtime.
    // The input to the shader program is fed to the vertex_input, so your vertex data&apos;s format
    // needs to match what you define in vertex_input
    let mut shader = ShaderProgram::new(
        ctx,
        ShaderDescription {
            // Take in to the shader a position (as a vector with 2 components) and a color (as a
            // vector with 4 components). This is the same format as &apos;vertices&apos; above
            vertex_input: &amp;amp;[
                Attribute::new(&amp;quot;vert_position&amp;quot;, AttributeType::Vector(D2)),
                Attribute::new(&amp;quot;vert_color&amp;quot;, AttributeType::Vector(D4)),
            ],
            // Pass to the fragment shader the color
            // OpenGL will actually smoothly interpolate between different vertex values for us, so
            // a red vertex and a blue vertex will have a gradient between them
            fragment_input: &amp;amp;[Attribute::new(&amp;quot;frag_color&amp;quot;, AttributeType::Vector(D4))],
            // Uniforms represent a value that&apos;s the same for the entire shader; we don&apos;t need any
            // here. If you&apos;re rendering images or applying transformations to your entire draw
            // call, use uniforms!
            uniforms: &amp;amp;[],
            // A program written in GLSL that uses the inputs and outputs defined above
            // There&apos;s also a hard-coded output called gl_Position
            vertex_shader: r#&amp;quot; void main() {
            gl_Position = vec4(vert_position, 0, 1);
            frag_color = vert_color;
        }&amp;quot;#,
            // The fragment shader has a hard-coded output: gl_FragColor
            fragment_shader: r#&amp;quot; void main() {
            gl_FragColor = frag_color;
        }&amp;quot;#,
        },
    )?;

    // Create buffer objects, which we use to transfer data from the CPU to the GPU
    let mut vb = VertexBuffer::new(ctx)?;
    let mut eb = ElementBuffer::new(ctx)?;
    // Set the data of the buffer to be our vertices and indices from earlier
    vb.set_data(&amp;amp;vertices);
    eb.set_data(&amp;amp;indices);
    // Prepare the shader for operations: shaders will raise errors if you forget to bind them
    shader.bind();
    // Clear the screen
    ctx.clear();
    unsafe {
        // Using our buffers, draw our triangle
        // We could also interpert our indices as Lines or a variety of other shape options:
        // nothing binds us to necessarily using Triangles, even though they&apos;re the most common
        // shape in graphics
        shader.draw(&amp;amp;vb, &amp;amp;eb, 0..indices.len(), GeometryMode::Triangles)?;
    }
    // Show our data to the window
    window.present();
    // Keep the window open and responsive until the user exits
    loop {
        events.next_event().await;
    }
}

// Run our application!
fn main() {
    run_gl(Settings::default(), |window, gfx, events| {
        async move { app(window, gfx, events).await.unwrap() }
    });
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(This is also an example of &lt;a href=&quot;../quicksilver-chanukah-2019-day-4&quot;&gt;yesterday&apos;s &lt;code&gt;blinds&lt;/code&gt;&lt;/a&gt; and its OpenGL support.)&lt;/p&gt;
&lt;h2&gt;Further Development&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;golem&lt;/code&gt; is not intended to be a fully-featured wrapper around all of OpenGL. It&apos;s intended to be enough to write fairly complex 2D graphics, or fairly simple 3D graphics. That said, there is a lot that&apos;s missing! Some of it is documented on the &lt;a href=&quot;https://github.com/ryanisaacg/golem/issues&quot;&gt;issue tracker&lt;/a&gt;, but I&apos;m sure that I&apos;ve missed other things. Nearly everything I need for Quicksilver is done, but your use case might be different. Feel free to open an issue discussing a feature addition, or try and experiment with a fork for larger changes.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;golem&lt;/code&gt; is the last new crate to announce, which means tomorrow is about what these crates enable: the new version of Quicksilver.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;../quicksilver-chanukah-2019&quot;&gt;The introduction post&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../quicksilver-chanukah-2019-day-2&quot;&gt;&lt;code&gt;platter&lt;/code&gt;: An async file-loading API for desktop and web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../quicksilver-chanukah-2019-day-3&quot;&gt;&lt;code&gt;gestalt&lt;/code&gt;: An API to manage bundling and saving data locally on desktop and web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../quicksilver-chanukah-2019-day-4&quot;&gt;&lt;code&gt;blinds&lt;/code&gt;: An easy-to-use async wrapper of &lt;code&gt;winit&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;This post!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../quicksilver-chanukah-2019-day-6&quot;&gt;Changes to the Quicksilver application lifecycle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../quicksilver-chanukah-2019-day-7&quot;&gt;Changes to the Quicksilver graphics API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../quicksilver-chanukah-2019-day-8&quot;&gt;An overview of the work on web support this year&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content:encoded></item><item><title>A Quicksilver Chanukah, Day 4: Blinds</title><link>https://ryanisaacg.com/code/quicksilver-chanukah-2019-day-4/</link><guid>https://ryanisaacg.com/code/quicksilver-chanukah-2019-day-4/</guid><description>With the recent update to winit, it gained web support! This is great, and it means that Quicksilver doesn&apos;t need to have its own parallel implementation of windowing. However, there is room for an abstraction that&apos;s a little simpler than Winit, and takes advantage of async/.await, which is where blinds comes in.</description><pubDate>Wed, 25 Dec 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;With the recent update to &lt;a href=&quot;https://github.com/rust-windowing/winit&quot;&gt;&lt;code&gt;winit&lt;/code&gt;&lt;/a&gt;, it gained web support! This is great, and it means that Quicksilver doesn&apos;t need to have its own parallel implementation of windowing. However, there is room for an abstraction that&apos;s a little simpler than Winit, and takes advantage of &lt;code&gt;async/.await&lt;/code&gt;, which is where &lt;a href=&quot;https://crates.io/crates/blinds&quot;&gt;&lt;code&gt;blinds&lt;/code&gt;&lt;/a&gt; comes in.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;blinds&lt;/code&gt; is based on &lt;code&gt;winit&lt;/code&gt;, but focused on Quicksilver&apos;s specific use case of single-window games on desktop and web. It also integrates &lt;code&gt;gilrs&lt;/code&gt; for gamepad support (though this could be provided directly by &lt;code&gt;winit&lt;/code&gt; later), without exposing either in its external API. Additionally, &lt;code&gt;blinds&lt;/code&gt; has optional support for OpenGL, via &lt;code&gt;glow&lt;/code&gt; for uniform bindings across web and desktop.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;async&lt;/code&gt; API works via the &lt;code&gt;LocalPool&lt;/code&gt; and the &lt;code&gt;winit&lt;/code&gt; event loop, allowing you to write code that &lt;em&gt;almost&lt;/em&gt; looks like a synchronous event loop.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;use blinds::{run, Event, EventStream, Key, Settings, Window};

run(Settings::default(), app);

async fn app(_window: Window, mut events: EventStream) {
    loop {
        while let Some(ev): events.next_event().await {
            // Process your events here!
        }
        // Process your frame here!
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The use of &lt;code&gt;.await&lt;/code&gt; here is a bit of a hack, as it allows the event loop to wrest control away from the user and return it to the browser without blocking. Compare this to the comparable snippet from the legacy Quicksilver API:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;use quicksilver::{
    Result,
    geom::Vector,
    lifecycle::{Event, Settings, State, Window, run},
};

struct HelloWorld;

impl State for HelloWorld {
    fn new() -&amp;gt; Result&amp;lt;HelloWorld&amp;gt; {
        Ok(HelloWorld)
    }
    
    fn event(&amp;amp;mut self, window: &amp;amp;mut Window, event: &amp;amp;Event) -&amp;gt; Result&amp;lt;()&amp;gt; {
        // Process events here
        Ok(())
    }
    
    fn update(&amp;amp;mut self, window: &amp;amp;mut Window) -&amp;gt; Result&amp;lt;()&amp;gt; {
        // Update here
        Ok(())
    }

    fn draw(&amp;amp;mut self, window: &amp;amp;mut Window) -&amp;gt; Result&amp;lt;()&amp;gt; {
        // Draw here
        Ok(())
    }
}

fn main() {
    run::&amp;lt;HelloWorld&amp;gt;(&amp;quot;Hello World&amp;quot;, Vector::new(800, 600), Settings::default());
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;async&lt;/code&gt; API isn&apos;t just way more convenient than the previous, trait-based system. It also allows you to use other &lt;code&gt;async&lt;/code&gt; APIs (like &lt;a href=&quot;../quicksilver-chanukah-2019-day-2&quot;&gt;day 2&apos;s &lt;code&gt;platter&lt;/code&gt;&lt;/a&gt;), which is important for web support.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;blinds&lt;/code&gt; isn&apos;t quite ready for a full release yet: there are a few more window APIs I do want to expose before it leaves alpha. However, you can still try it out, just be aware that the API is fairly unstable and likely to change between multiple times before the first non-alpha release!&lt;/p&gt;
&lt;p&gt;With &lt;code&gt;blinds&lt;/code&gt; today, tomorrow will be the last new crate: &lt;code&gt;golem&lt;/code&gt;!&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;../quicksilver-chanukah-2019&quot;&gt;The introduction post&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../quicksilver-chanukah-2019-day-2&quot;&gt;&lt;code&gt;platter&lt;/code&gt;: An async file-loading API for desktop and web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../quicksilver-chanukah-2019-day-3&quot;&gt;&lt;code&gt;gestalt&lt;/code&gt;: An API to manage bundling and saving data locally on desktop and web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;This post!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../quicksilver-chanukah-2019-day-5&quot;&gt;&lt;code&gt;golem&lt;/code&gt;: An opinionated mostly-safe graphics library for desktop and web GL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../quicksilver-chanukah-2019-day-6&quot;&gt;Changes to the Quicksilver application lifecycle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../quicksilver-chanukah-2019-day-7&quot;&gt;Changes to the Quicksilver graphics API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../quicksilver-chanukah-2019-day-8&quot;&gt;An overview of the work on web support this year&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content:encoded></item><item><title>A Quicksilver Chanukah, Day 3: Gestalt</title><link>https://ryanisaacg.com/code/quicksilver-chanukah-2019-day-3/</link><guid>https://ryanisaacg.com/code/quicksilver-chanukah-2019-day-3/</guid><description>Often your application might want to store gamestate or configurations, but the web has no filesystem access. Additionally, you don&apos;t want to just dump files in the user&apos;s home directory; each desktop operating system has a different preferred location for storing application-specific data, and often different locations for different kinds of data.</description><pubDate>Tue, 24 Dec 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Often your application might want to store gamestate or configurations, but the web has no filesystem access. Additionally, you don&apos;t want to just dump files in the user&apos;s home directory; each desktop operating system has a different preferred location for storing application-specific data, and often different locations for different kinds of data.&lt;/p&gt;
&lt;p&gt;Introducing &lt;a href=&quot;https://crates.io/crates/gestalt&quot;&gt;&lt;code&gt;gestalt&lt;/code&gt;&lt;/a&gt;, a library that bundles up your data and stores it away so you don&apos;t have to.&lt;/p&gt;
&lt;p&gt;A sample to save some game state:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;use gestalt::{Location, save, load};
use serde::{Serialize, Deserialize};

#[derive(Serialize, Deserialize)]
struct Player {
    name: String,
    score: u32
}

let player1 = Player { name: &amp;quot;Bob&amp;quot;.to_string(), score: 21 };
save(Location::Cache, &amp;quot;mygame&amp;quot;, &amp;quot;player1&amp;quot;, &amp;amp;player1).expect(&amp;quot;Could not save Player 1&amp;quot;);

let player2 = Player { name: &amp;quot;Alice&amp;quot;.to_string(), score: 200 };
save(Location::Cache, &amp;quot;mygame&amp;quot;, &amp;quot;player2&amp;quot;, &amp;amp;player2).expect(&amp;quot;Could not save Player 2&amp;quot;);

// Now reload.
let player1 = load::&amp;lt;Player&amp;gt;(Location::Cache, &amp;quot;mygame&amp;quot;, &amp;quot;player1&amp;quot;).expect(&amp;quot;Could not load Player 1&amp;quot;);
let player2 = load::&amp;lt;Player&amp;gt;(Location::Cache, &amp;quot;mygame&amp;quot;, &amp;quot;player2&amp;quot;).expect(&amp;quot;Could not load Player 2&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Getsalt creates a Key/Value store, backed by the filesystem on desktop and the web storage API. The key is formed by &lt;code&gt;Location&lt;/code&gt;, which determines the kind of data (&lt;code&gt;Location::Cache&lt;/code&gt;, &lt;code&gt;Location::Data&lt;/code&gt;, and &lt;code&gt;Location::Config&lt;/code&gt;), the application name, and a string which identifies the name of the data chunk. The value is anything that implements &lt;code&gt;Serialize&lt;/code&gt; from &lt;a href=&quot;https://crates.io/crates/serde&quot;&gt;&lt;code&gt;serde&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Cache&lt;/code&gt; is for data that can be cleared between runs of your application; &lt;code&gt;Data&lt;/code&gt; is for blobs like save states, and &lt;code&gt;Config&lt;/code&gt; is for application settings. &lt;code&gt;gestalt&lt;/code&gt; uses &lt;a href=&quot;https://crates.io/crates/dirs&quot;&gt;&lt;code&gt;dirs&lt;/code&gt;&lt;/a&gt; to ensure that it saves your data in the right place for each, regardless of your user&apos;s operating system.&lt;/p&gt;
&lt;p&gt;That&apos;s Day 3 done: &lt;code&gt;gestalt&lt;/code&gt; is pretty small! Tomorrow&apos;s library, &lt;code&gt;blinds&lt;/code&gt;, starts to get quite a bit bigger.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;../quicksilver-chanukah-2019&quot;&gt;The introduction post&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../quicksilver-chanukah-2019-day-2&quot;&gt;&lt;code&gt;platter&lt;/code&gt;: An async file-loading API for desktop and web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;This post!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../quicksilver-chanukah-2019-day-4&quot;&gt;&lt;code&gt;blinds&lt;/code&gt;: An easy-to-use async wrapper of &lt;code&gt;winit&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../quicksilver-chanukah-2019-day-5&quot;&gt;&lt;code&gt;golem&lt;/code&gt;: An opinionated mostly-safe graphics library for desktop and web GL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../quicksilver-chanukah-2019-day-6&quot;&gt;Changes to the Quicksilver application lifecycle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../quicksilver-chanukah-2019-day-7&quot;&gt;Changes to the Quicksilver graphics API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../quicksilver-chanukah-2019-day-8&quot;&gt;An overview of the work on web support this year&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content:encoded></item><item><title>A Quicksilver Chanukah, Day 2: Platter</title><link>https://ryanisaacg.com/code/quicksilver-chanukah-2019-day-2/</link><guid>https://ryanisaacg.com/code/quicksilver-chanukah-2019-day-2/</guid><description>This year saw the release of async/.await in stable Rust, marking a huge change in how asynchronous code is written. Previously, one would have to chain a series of combinators onto a Future instance to accomplish asyncrhonous tasks. In Quicksilver, this was used for asset loading (for compatibility with the web backend), and has been a frequent source of pain.</description><pubDate>Mon, 23 Dec 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;This year saw the release of &lt;code&gt;async/.await&lt;/code&gt; in stable Rust, marking a huge change in how asynchronous code is written. Previously, one would have to chain a series of combinators onto a &lt;code&gt;Future&lt;/code&gt; instance to accomplish asyncrhonous tasks. In Quicksilver, this was used for asset loading (for compatibility with the web backend), and has been a frequent source of pain.&lt;/p&gt;
&lt;p&gt;Something as simple as loading a file, reading its contents, and loading a series of images based on those contents might look like this psuedo-Rust:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;let images: load_file(&amp;quot;my_manifest_path&amp;quot;)
    .map(parse_file_contents)
    .and_then(|image_paths| join_all(
        image_paths
            .map(load_file)
            .map(|file| file.and_then(parse_image))
    );

render_loading();
loop {
    // Core application loop
    if images.is_ready {
        render_frame(&amp;amp;images);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is fairly hard to read, and requires a bit of domain-specific knowledge of the combinators to achieve it. Worse still is introducing more than one of these combinator chains, and trying to execute game logic only if they complete. This snippet is plenty complex, and hasn&apos;t even touched error handling.&lt;/p&gt;
&lt;p&gt;Introducing &lt;a href=&quot;https://crates.io/crates/platter&quot;&gt;&lt;code&gt;platter&lt;/code&gt;&lt;/a&gt;, a new async-enabled crate with a single, simple task: load files on desktop and web with an easy API.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;render_loading();
let contents: load_file(&amp;quot;my_manifest_path&amp;quot;).await?;
let image_paths: parse_file_contents(contents);
let images: Vec::new();
for image_path in image_paths {
    let image_file: load_file(image_path).await?;
    images.push(parse_image(image_file)?);
}
loop {
    render_frame(&amp;amp;images);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can still make use of the combinators in a more functional-programming style if we wish, but now it&apos;s much clearer:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;render_loading();
let contents: load_file(&amp;quot;my_manifest_path&amp;quot;).await;
let image_futures: parse_file_contents(contents)
    .map(load_file);
let images: Vec&amp;lt;Image&amp;gt;: try_join_all(image_futures)
    .await?
    .map(parse_image)
    .collect()?;
loop {
    render_frame(&amp;amp;images);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;platter&lt;/code&gt; is small and can be plugged into your own game framework or game project if you want to harness &lt;code&gt;async/await&lt;/code&gt; to load files on desktop and web. It will be a major part of the new Quicksilver application lifecyle!&lt;/p&gt;
&lt;p&gt;That&apos;s Day 2 down, but there are 6 more days of Quicksilver Chanukah:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;../quicksilver-chanukah-2019&quot;&gt;Yesterday&apos;s introduction post&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;This post!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../quicksilver-chanukah-2019-day-3&quot;&gt;&lt;code&gt;gestalt&lt;/code&gt;: An API to manage bundling and saving data locally on desktop and web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../quicksilver-chanukah-2019-day-4&quot;&gt;&lt;code&gt;blinds&lt;/code&gt;: An easy-to-use async wrapper of &lt;code&gt;winit&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../quicksilver-chanukah-2019-day-5&quot;&gt;&lt;code&gt;golem&lt;/code&gt;: An opinionated mostly-safe graphics library for desktop and web GL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../quicksilver-chanukah-2019-day-6&quot;&gt;Changes to the Quicksilver application lifecycle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../quicksilver-chanukah-2019-day-7&quot;&gt;Changes to the Quicksilver graphics API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../quicksilver-chanukah-2019-day-8&quot;&gt;An overview of the work on web support this year&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content:encoded></item><item><title>A Quicksilver Chanukah: Day 1</title><link>https://ryanisaacg.com/code/quicksilver-chanukah-2019/</link><guid>https://ryanisaacg.com/code/quicksilver-chanukah-2019/</guid><description>I started this year with a blog post about the state of Quicksilver where I set a goal for myself: get web support for important game development crates upstreamed. At the end of the year, I&apos;m happy to update this work (by me and many others!) has been a success, and the core of Rust&apos;s game ecosystem is now-web enabled. In the future, I want to write a brief overview of those changes, but for now I want to focus on their relevance to Quicksilver.</description><pubDate>Sun, 22 Dec 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I started this year with a &lt;a href=&quot;../state-of-quicksilver-feb-2019&quot;&gt;blog post about the state of Quicksilver&lt;/a&gt; where I set a goal for myself: get web support for important game development crates upstreamed. At the end of the year, I&apos;m happy to update this work (by me and many others!) has been a success, and the core of Rust&apos;s game ecosystem is now-web enabled. In the future, I want to write a brief overview of those changes, but for now I want to focus on their relevance to Quicksilver.&lt;/p&gt;
&lt;p&gt;Without having to maintain my own set of web bindings for Quicksilver, I was able to start working on significant changes to both the internal and external structure. There are a few entirely unrelated modules in Quicksilver that are all needed for the framework: handling filesystem resources, creating and loading local data, the event loop, the graphics API, and the sound API. It makes sense to allow users to pick and choose these systems, which is the goal of Quicksilver&apos;s optional features. However, that still requires depending on Quicksilver, which doesn&apos;t make sense for some projects. Instead, I&apos;ve created a few new crates that anyone can drop into their project without pulling in any other Quicksilver-related code.&lt;/p&gt;
&lt;p&gt;Additionally, a major new Rust feature landed this year: async/await. Quicksilver&apos;s asset loading system has been a sticking point, because of its design decisions and the inherent pain of combinator-based &lt;code&gt;Future&lt;/code&gt; code. With &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;.await&lt;/code&gt;, a new asynchronous asset loading API can be almost seamless. Combined with fixes to long-standing graphics API problems, I&apos;ve been working on a new major release for Quicksilver (which will be the first breaking change in over a year.)&lt;/p&gt;
&lt;p&gt;As &lt;a href=&quot;https://en.wikipedia.org/wiki/Hanukkah&quot;&gt;Chanukah&lt;/a&gt; starts tonight, I&apos;m going to share these new crates and big Quicksilver updates over the next eight days. I can&apos;t promise I&apos;ll actually stick to this schedule, but my goal is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;This post!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../quicksilver-chanukah-2019-day-2&quot;&gt;&lt;code&gt;platter&lt;/code&gt;: An async file-loading API for desktop and web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../quicksilver-chanukah-2019-day-3&quot;&gt;&lt;code&gt;gestalt&lt;/code&gt;: An API to manage bundling and saving data locally on desktop and web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../quicksilver-chanukah-2019-day-4&quot;&gt;&lt;code&gt;blinds&lt;/code&gt;: An easy-to-use async wrapper of &lt;code&gt;winit&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../quicksilver-chanukah-2019-day-5&quot;&gt;&lt;code&gt;golem&lt;/code&gt;: An opinionated mostly-safe graphics library for desktop and web GL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../quicksilver-chanukah-2019-day-6&quot;&gt;Changes to the Quicksilver application lifecycle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../quicksilver-chanukah-2019-day-7&quot;&gt;Changes to the Quicksilver graphics API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../quicksilver-chanukah-2019-day-8&quot;&gt;An overview of the work on web support this year&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content:encoded></item><item><title>Website Makeover</title><link>https://ryanisaacg.com/code/new-blog-debut/</link><guid>https://ryanisaacg.com/code/new-blog-debut/</guid><description>So www.ryanisaacg.com has a very new look, powered by Hugo and my (fairly small) fork of the hello-friend-ng theme.</description><pubDate>Sat, 20 Jul 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;So www.ryanisaacg.com has a very new look, powered by Hugo and my (fairly small) fork of the &lt;a href=&quot;https://github.com/rhazdon/hugo-theme-hello-friend-ng&quot;&gt;hello-friend-ng&lt;/a&gt; theme.&lt;/p&gt;
&lt;p&gt;Partly the site will be dedicated to a bit of a professional showcase / bio for myself, but also with added blog functionality I can communicate in a more public way about my plans for my open source projects.&lt;/p&gt;
&lt;p&gt;The State of Quicksilver that I wrote earlier this year has moved from its previous home as Github gist to retroactively being a post here, as I feel more comfortable linking to my writing in a domain that I control and can ensure the links stay live. The Quicksilver website itself is still hosted within the Quicksilver repo, partially for ease of version control (if a commit changes code, it can change the website docs in lockstep) and partially because I&apos;m not sure how much I want to present Quicksilver as being &lt;em&gt;my project&lt;/em&gt; versus the &lt;em&gt;Quicksilver project&lt;/em&gt;. I&apos;m too cheap and lazy to buy a quicksilver domain, so the URL still contains my screen name, but the website is independent of the rest of ryanisaacg.com. Future State-Of-Quicksilver posts will also live on this blog though, as my personal plans for the project and my work for the Rust ecosystem feel out-of-band for the actual Quicksilver site.&lt;/p&gt;
&lt;p&gt;I won&apos;t be embedding Disqus for comments, but if you want to chat I&apos;m on the &lt;a href=&quot;https://bit.ly/rust-community&quot;&gt;Rust Community Discord&lt;/a&gt; as @ryanisaacg. I&apos;d love to hear people&apos;s thoughts on the new look, if Quicksilver should be moved to a sub-page of this site, and if State of Quicksilver should be a gist, blog posts here, or some combination.&lt;/p&gt;
</content:encoded></item><item><title>The State of Quicksilver Feb 2019</title><link>https://ryanisaacg.com/code/state-of-quicksilver-feb-2019/</link><guid>https://ryanisaacg.com/code/state-of-quicksilver-feb-2019/</guid><description>For anyone who doesn&apos;t know, Quicksilver is my 2D game framework that targets desktop and web. It is a pure-Rust library that focuses on ergonomics and simplicity.</description><pubDate>Mon, 04 Feb 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;For anyone who doesn&apos;t know, &lt;a href=&quot;https://github.com/ryanisaacg/quicksilver&quot;&gt;Quicksilver&lt;/a&gt; is my 2D game framework that targets desktop and web. It is a pure-Rust library that focuses on ergonomics and simplicity.&lt;/p&gt;
&lt;p&gt;Quicksilver is part of a small (but growing) set of Rust game engines. Notable are the Amethyst project, an open-source game engine, and ggez, a LOVE-inspired 2D game framework.
Increasingly it is practical to build an entire game with only the Rust toolchain: winit provides windowing, a variety of crates allow access to platform graphics APIs, rodio provides sound, rusttype for font rendering, etc. A pure-Rust game framework is getting easier to make all the time.&lt;/p&gt;
&lt;p&gt;However, very few libraries support WASM out of the box. This means Quicksilver and Rust WASM games in general essentially have small implementations of windowing, event handling, sounds, graphics, and input for the web that have not been contributed upstream.&lt;/p&gt;
&lt;h2&gt;The Framework Problem&lt;/h2&gt;
&lt;p&gt;Opting to use Quicksilver for some feature (web support, API design, automatic batching) requires opting into &lt;em&gt;all&lt;/em&gt; of Quicksilver&apos;s features. This isn&apos;t necessarily great! Even with compile-time feature flags available, it&apos;s hard to do any Quicksilver code without buying into the State trait. This boils down to the vision of Quicksilver as a framework: if you can just plug in Quicksilver and start making a game right away, it needs to be everything to everyone.&lt;/p&gt;
&lt;p&gt;Partly this is due to Quicksilver&apos;s history as a bit of a learning project for me, which I wanted to build from scratch in as many places as possible. It&apos;s also caused by my impatience: the Rust ecosystem is amazing and featureful, but waiting for every single upstream project to accept changes would mean that Quicksilver could only be developed as fast as its slowest dependency. I tend to have time to work on the project in bursts, when I clear out the bug backlog and implement a few features from the roadmap; this doesn&apos;t mesh well with long-running interactions with other projects. The way I&apos;ve handled this in the past is writing my own Javascript bindings for each feature, essentially cloning an entire crate.&lt;/p&gt;
&lt;h2&gt;The Fundamentals&lt;/h2&gt;
&lt;p&gt;Largely, Quicksilver&apos;s API is approaching a state of stability. It accomplishes most of what I want it to, in a way I&apos;m largely satisfied with. For end users, the Quicksilver project has been more or less stable for a few months, and no substantial breaking changes are planned for the future.&lt;/p&gt;
&lt;p&gt;However, Quicksilver still has quite a few systems implemented by a dependency and an ad-hoc web clone of that dependency. This is what I hope to change, by contributing web backends across the ecosystem. My ideal outcome is that the fundamental multimedia crates (winit, rodio, gilrs, etc.) can run on WASM out-of-the-box.&lt;/p&gt;
&lt;h2&gt;Going Forward&lt;/h2&gt;
&lt;p&gt;If it sounds like my current goal is to make Quicksilver obsolete, that wouldn&apos;t be too far off. Quicksilver&apos;s raison d&apos;etre is packaging up a bundle of functionality and to provide a single API for both web and native. Moving the ecosystem to support web and native makes this less important. Parts of Quicksilver that I think are particularly useful will probably become their own crates (re-exported in Quicksilver) to allow their use outside the framework. Some future version of Quicksilver may just be entirely a re-export of various crates and types with a consistent organization.&lt;/p&gt;
&lt;p&gt;In essence, I want seamless desktop and WASM development to move from a selling point of developing games in Quicksilver to a selling point of developing games in Rust.&lt;/p&gt;
</content:encoded></item><item><title>High Crimes and Misdeamenors with wasm and dynamic linking</title><link>https://ryanisaacg.com/posts/wasm-dl/</link><guid>https://ryanisaacg.com/posts/wasm-dl/</guid><pubDate>Tue, 01 Jan 1901 00:00:00 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;Initial thought was to drive with data&lt;/li&gt;
&lt;li&gt;Massive combinatorial explosion python script&lt;/li&gt;
&lt;li&gt;Refined down&lt;/li&gt;
&lt;li&gt;Realized I can and should just read the wasm import section&lt;/li&gt;
&lt;li&gt;given the import section tried some trait stuff and macro stuff, couldn&apos;t figure it out&lt;/li&gt;
&lt;li&gt;punning a ValRaw that represents a float to a u32 was difficult, to_bits and from_bits were producing the wrong results&lt;/li&gt;
&lt;li&gt;Eventually reached for a transmute (safe transmute through bytemuck), need to take the u32, convert to f32, then transmute it back&lt;/li&gt;
&lt;li&gt;Can&apos;t use the wasm import section, at least not entirely - pointers!&lt;/li&gt;
&lt;/ul&gt;
</content:encoded></item></channel></rss>