<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>quicksilver-2019 on ryan.isaac.g</title>
    <link>https://www.ryanisaacg.com/tags/quicksilver-2019/</link>
    <description>Recent content in quicksilver-2019 on ryan.isaac.g</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 25 Dec 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.ryanisaacg.com/tags/quicksilver-2019/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A Quicksilver Chanukah, Day 4: Blinds</title>
      <link>https://www.ryanisaacg.com/posts/quicksilver-chanukah-2019-day-4/</link>
      <pubDate>Wed, 25 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.ryanisaacg.com/posts/quicksilver-chanukah-2019-day-4/</guid>
      <description>With the recent update to winit, it gained web support! This is great, and it means that Quicksilver doesn&amp;rsquo;t need to have its own parallel implementation of windowing. However, there is room for an abstraction that&amp;rsquo;s a little simpler than Winit, and takes advantage of async/.await, which is where blinds comes in.
blinds is based on winit, but focused on Quicksilver&amp;rsquo;s specific use case of single-window games on desktop and web.</description>
    </item>
    
    <item>
      <title>A Quicksilver Chanukah, Day 3: Gestalt</title>
      <link>https://www.ryanisaacg.com/posts/quicksilver-chanukah-2019-day-3/</link>
      <pubDate>Tue, 24 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.ryanisaacg.com/posts/quicksilver-chanukah-2019-day-3/</guid>
      <description>Often your application might want to store gamestate or configurations, but the web has no filesystem access. Additionally, you don&amp;rsquo;t want to just dump files in the user&amp;rsquo;s home directory; each desktop operating system has a different preferred location for storing application-specific data, and often different locations for different kinds of data.
Introducing gestalt, a library that bundles up your data and stores it away so you don&amp;rsquo;t have to. A sample to save some game state:</description>
    </item>
    
    <item>
      <title>A Quicksilver Chanukah, Day 2: Platter</title>
      <link>https://www.ryanisaacg.com/posts/quicksilver-chanukah-2019-day-2/</link>
      <pubDate>Mon, 23 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.ryanisaacg.com/posts/quicksilver-chanukah-2019-day-2/</guid>
      <description>This year saw the release of async/.await in stable Rust, marking a huge change in how asynchronous code is written. Previously, one would have to chain a series of combinators onto a Future instance to accomplish asyncrhonous tasks. In Quicksilver, this was used for asset loading (for compatibility with the web backend), and has been a frequent source of pain.
Something as simple as loading a file, reading its contents, and loading a series of images based on those contents might look like this psuedo-Rust:</description>
    </item>
    
    <item>
      <title>A Quicksilver Chanukah: Day 1</title>
      <link>https://www.ryanisaacg.com/posts/quicksilver-chanukah-2019/</link>
      <pubDate>Sun, 22 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.ryanisaacg.com/posts/quicksilver-chanukah-2019/</guid>
      <description>I started this year with a blog post about the state of Quicksilver where I set a goal for myself: get web support for important game development crates upstreamed. At the end of the year, I&amp;rsquo;m happy to update this work (by me and many others!) has been a success, and the core of Rust&amp;rsquo;s game ecosystem is now-web enabled. In the future, I want to write a brief overview of those changes, but for now I want to focus on their relevance to Quicksilver.</description>
    </item>
    
  </channel>
</rss>