<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>platter on ryan.isaac.g</title>
    <link>https://www.ryanisaacg.com/tags/platter/</link>
    <description>Recent content in platter on ryan.isaac.g</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 23 Dec 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.ryanisaacg.com/tags/platter/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A Quicksilver Chanukah, Day 2: Platter</title>
      <link>https://www.ryanisaacg.com/posts/quicksilver-chanukah-2019-day-2/</link>
      <pubDate>Mon, 23 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.ryanisaacg.com/posts/quicksilver-chanukah-2019-day-2/</guid>
      <description>This year saw the release of async/.await in stable Rust, marking a huge change in how asynchronous code is written. Previously, one would have to chain a series of combinators onto a Future instance to accomplish asyncrhonous tasks. In Quicksilver, this was used for asset loading (for compatibility with the web backend), and has been a frequent source of pain.
Something as simple as loading a file, reading its contents, and loading a series of images based on those contents might look like this psuedo-Rust:</description>
    </item>
    
  </channel>
</rss>