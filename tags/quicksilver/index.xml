<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>quicksilver on ryan.isaac.g</title>
    <link>https://www.ryanisaacg.com/tags/quicksilver/</link>
    <description>Recent content in quicksilver on ryan.isaac.g</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 28 Dec 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.ryanisaacg.com/tags/quicksilver/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A Quicksilver Chanukah, Day 7: Quicksilver&#39;s New Graphics</title>
      <link>https://www.ryanisaacg.com/posts/quicksilver-chanukah-2019-day-7/</link>
      <pubDate>Sat, 28 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.ryanisaacg.com/posts/quicksilver-chanukah-2019-day-7/</guid>
      <description>The graphics API of Quicksilver isn&amp;rsquo;t as dire need of a rework as the lifecycle APIs, but I wanted to take the next breaking change as an opportunity to address some long-standing issues. In no particular order, they are:
Low-Level Access As it stands, Quicksilver talks to a very specific backend design for graphics. The API is internal-only and designed to wrap up all the GL code in one place, to keep the high-level drawing APIs platform independent.</description>
    </item>
    
    <item>
      <title>A Quicksilver Chanukah, Day 6: Quicksilver&#39;s New Lifecycle</title>
      <link>https://www.ryanisaacg.com/posts/quicksilver-chanukah-2019-day-6/</link>
      <pubDate>Fri, 27 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.ryanisaacg.com/posts/quicksilver-chanukah-2019-day-6/</guid>
      <description>Quicksilver has always had some major API compromises to deliver on its core promise: write a game once, and it targets desktop and the web with no changes. The two ugliest compromises are the State and Asset APIs, for managing your application&amp;rsquo;s core loop and file loading, respectively.
State is a trait that Quicksilver uses to manage when your code runs. It requires you define the new method, as well as draw.</description>
    </item>
    
    <item>
      <title>A Quicksilver Chanukah, Day 5: Golem</title>
      <link>https://www.ryanisaacg.com/posts/quicksilver-chanukah-2019-day-5/</link>
      <pubDate>Thu, 26 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.ryanisaacg.com/posts/quicksilver-chanukah-2019-day-5/</guid>
      <description>What is golem? golem is a mostly-safe graphics API that targets OpenGL 3.2 and WebGL 1 that helps make writing GL less painful
Why golem and not X If you&amp;rsquo;re just interested in what golem is and how it works, feel free to skip this section!
The previous three days I&amp;rsquo;ve introduced new crates that mostly stood on their own. I&amp;rsquo;m not aware of any fleshed-out alternatives, so creating those libraries myself doesn&amp;rsquo;t require much explanation.</description>
    </item>
    
    <item>
      <title>A Quicksilver Chanukah, Day 4: Blinds</title>
      <link>https://www.ryanisaacg.com/posts/quicksilver-chanukah-2019-day-4/</link>
      <pubDate>Wed, 25 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.ryanisaacg.com/posts/quicksilver-chanukah-2019-day-4/</guid>
      <description>With the recent update to winit, it gained web support! This is great, and it means that Quicksilver doesn&amp;rsquo;t need to have its own parallel implementation of windowing. However, there is room for an abstraction that&amp;rsquo;s a little simpler than Winit, and takes advantage of async/.await, which is where blinds comes in.
blinds is based on winit, but focused on Quicksilver&amp;rsquo;s specific use case of single-window games on desktop and web.</description>
    </item>
    
    <item>
      <title>A Quicksilver Chanukah, Day 3: Gestalt</title>
      <link>https://www.ryanisaacg.com/posts/quicksilver-chanukah-2019-day-3/</link>
      <pubDate>Tue, 24 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.ryanisaacg.com/posts/quicksilver-chanukah-2019-day-3/</guid>
      <description>Often your application might want to store gamestate or configurations, but the web has no filesystem access. Additionally, you don&amp;rsquo;t want to just dump files in the user&amp;rsquo;s home directory; each desktop operating system has a different preferred location for storing application-specific data, and often different locations for different kinds of data.
Introducing gestalt, a library that bundles up your data and stores it away so you don&amp;rsquo;t have to. A sample to save some game state:</description>
    </item>
    
    <item>
      <title>A Quicksilver Chanukah, Day 2: Platter</title>
      <link>https://www.ryanisaacg.com/posts/quicksilver-chanukah-2019-day-2/</link>
      <pubDate>Mon, 23 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.ryanisaacg.com/posts/quicksilver-chanukah-2019-day-2/</guid>
      <description>This year saw the release of async/.await in stable Rust, marking a huge change in how asynchronous code is written. Previously, one would have to chain a series of combinators onto a Future instance to accomplish asyncrhonous tasks. In Quicksilver, this was used for asset loading (for compatibility with the web backend), and has been a frequent source of pain.
Something as simple as loading a file, reading its contents, and loading a series of images based on those contents might look like this psuedo-Rust:</description>
    </item>
    
    <item>
      <title>A Quicksilver Chanukah: Day 1</title>
      <link>https://www.ryanisaacg.com/posts/quicksilver-chanukah-2019/</link>
      <pubDate>Sun, 22 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.ryanisaacg.com/posts/quicksilver-chanukah-2019/</guid>
      <description>I started this year with a blog post about the state of Quicksilver where I set a goal for myself: get web support for important game development crates upstreamed. At the end of the year, I&amp;rsquo;m happy to update this work (by me and many others!) has been a success, and the core of Rust&amp;rsquo;s game ecosystem is now-web enabled. In the future, I want to write a brief overview of those changes, but for now I want to focus on their relevance to Quicksilver.</description>
    </item>
    
    <item>
      <title>The State of Quicksilver Feb 2019</title>
      <link>https://www.ryanisaacg.com/posts/state-of-quicksilver-feb-2019/</link>
      <pubDate>Mon, 04 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.ryanisaacg.com/posts/state-of-quicksilver-feb-2019/</guid>
      <description>What is Quicksilver? For anyone who doesn&amp;rsquo;t know, Quicksilver is my 2D game framework that targets desktop and web. It is a pure-Rust library that focuses on ergonomics and simplicity.
The State of Rust (WASM) Game Development Quicksilver is part of a small (but growing) set of Rust game engines. Notable are the Amethyst project, an open-source game engine, and ggez, a LOVE-inspired 2D game framework. Increasingly it is practical to build an entire game with only the Rust toolchain: winit provides windowing, a variety of crates allow access to platform graphics APIs, rodio provides sound, rusttype for font rendering, etc.</description>
    </item>
    
  </channel>
</rss>